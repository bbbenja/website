<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on Code-Troopers - Vous avez une idée, nous la réalisons</title>
    <link>http://test.code-troopers.com/tags/git/</link>
    <description>Recent content in Git on Code-Troopers - Vous avez une idée, nous la réalisons</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-fr</language>
    <lastBuildDate>Thu, 16 Jul 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://test.code-troopers.com/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>GIT-SVN comment survivre dans un environnement hostile</title>
      <link>http://test.code-troopers.com/2015/07/16/gitsvn</link>
      <pubDate>Thu, 16 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://test.code-troopers.com/2015/07/16/gitsvn</guid>
      <description>

&lt;p&gt;Git c’est cool, Git c’est Hype, Git c’est tout récent (&lt;a href=&#34;http://git-scm.com/book/fr/v1/D%C3%A9marrage-rapide-Une-rapide-histoire-de-Git&#34;&gt;enfin presque&lt;/a&gt;) et c’est pour ça qu’on aime bien.
Mais pour beaucoup Git c’est nouveau, donc c’est le changement, donc c’est compliqué, et c’est pour ça que plein de boîtes préfèrent garder leur serveur svn.&lt;/p&gt;

&lt;p&gt;Je vais tenter ici, de vous donner les principales commandes de &lt;code&gt;Git-SVN&lt;/code&gt;. Ainsi si vous vous trouvez dans une boîte qui ne veut pas changer son scm mais que vous, vous avez envie de changement,
vous pourrez donc utiliser la puissance de Git.
Et ce sans aucun impact sur le gestionnaire de sources de la société dans laquelle vous êtes. C&amp;rsquo;est génial non ?&lt;/p&gt;

&lt;h2 id=&#34;prérequis:670b5efaab07fcd0dc591466ac7460f0&#34;&gt;Prérequis&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Avoir Git-SVN d&amp;rsquo;installé ! Et ce qui est bien fait, c&amp;rsquo;est que Git-SVN fait partie intégrante de Git. C&amp;rsquo;est donc Git que vous allez installer : &lt;a href=&#34;http://www.git-scm.com&#34;&gt;www.git-scm.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Un accès au svn (l&amp;rsquo;url du projet qui vous intéresse fera largement l&amp;rsquo;affaire)&lt;/li&gt;
&lt;li&gt;Un terminal&lt;/li&gt;
&lt;li&gt;Un tout petit peu de courage&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;init-du-projet:670b5efaab07fcd0dc591466ac7460f0&#34;&gt;Init du Projet&lt;/h2&gt;

&lt;p&gt;Le cas le plus courant est celui où tout le monde travaille sur le trunk du projet, et je vais partir de ce cas pour ce guide.
Si ce n&amp;rsquo;est pas le cas, il n&amp;rsquo;y a pas de gros changement, mais je vous invite à consulter plus en détail &lt;a href=&#34;https://git-scm.com/docs/git-svn&#34;&gt;la doc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Donc si on se met dans la situation où tout le monde travaille sur le trunk, pour récupérer les sources du projet dans un nouveau répertoire vous devrez faire un :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git svn clone http://maboite/svn/monBeauProjet/ -s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Par contre dès que le repo svn est un peu vieux (i.e. avec plein de commits) ça va mettre 3h ! En effet, Git va prendre les révisions une par une afin de créer son historique local.
Si vous n’avez pas besoin de tout l’historique des révisions ce que vous pouvez faire c’est :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git svn clone http://maboite/svn/monBeauProjet/ -s -r4000:HEAD
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ainsi il ne crééra l’histo qu’à partir de la révision 4000 du svn. Je vous conseille donc de prendre le 4000 le plus proche de la dernière révision.&lt;/p&gt;

&lt;p&gt;À partir de là c’est bon, vous avez votre projet qui est géré par Git. La preuve vous pouvez tester via ces différentes commandes&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git status
git branch -a
git log -n5
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;travailler-sur-le-projet-en-local:670b5efaab07fcd0dc591466ac7460f0&#34;&gt;Travailler sur le projet (en local)&lt;/h2&gt;

&lt;p&gt;Vous pouvez donc dès à présent commencer à travailler offline ou bien sans vous soucier des commits de vos collègues.
Et cela avec tous les avantages que Git apporte.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git commit -m&amp;quot;Ajout de la modification du mot de passe par l&#39;admin&amp;quot;
git stash save “Début de ma tâche prioritaire”
... // un peu de travail urgent
git stash pop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On peut même faire des branches Git (en local) sans que cela n&amp;rsquo;impacte le serveur.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout -b myLocalBranch
... // du travail avec plein de petits commits
git checkout master
git merge myLocalBranch
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;commiter-sur-le-svn:670b5efaab07fcd0dc591466ac7460f0&#34;&gt;Commiter sur le svn&lt;/h2&gt;

&lt;p&gt;Ensuite pour se synchroniser avec vos collègues (c&amp;rsquo;est mieux) les deux commandes indispensables sont&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git svn rebase
git svn dcommit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le &lt;code&gt;git svn rebase&lt;/code&gt; va faire l&amp;rsquo;équivalent d&amp;rsquo;un svn update quant au &lt;code&gt;git svn dcommit&lt;/code&gt; ça sera un svn commit.&lt;/p&gt;

&lt;h2 id=&#34;bonus-utiliser-des-branches:670b5efaab07fcd0dc591466ac7460f0&#34;&gt;Bonus : Utiliser des branches&lt;/h2&gt;

&lt;p&gt;Bon soyons honnêtes si vous utilisez un svn il y a quand même peu de chances que les branches soient vraiment utilisées (ou alors peut-être que vous aimez la douleur). Mais si ça arrive, voilà comment les utiliser.&lt;/p&gt;

&lt;p&gt;Mettre à jour toutes les branches du svn :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git svn fetch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Changer de branche :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout -b &amp;lt;brancheDistante&amp;gt; &amp;lt;nomDeBrancheLocale&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et maintenant vous pouvez naviguer entre vos branches normalement via Git  :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout master
git checkout nomDeBrancheLocale
git checkout -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;et par exemple pour recopier un commit d&amp;rsquo;une branche à une autre sans copier manuellement le fichier.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git cherry-pick
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Voilà vous avez maintenant les bases pour utiliser Git alors que de premier abord cela ne semblait pas possible.
Il ne vous reste plus qu&amp;rsquo;à forcer un peu plus pour remplacer l&amp;rsquo;ancien serveur svn par un nouveau sous Git et comme ça toute votre boîte pourra en profiter.
&lt;br/&gt;
&lt;br/&gt;
Pour connaître les principales commandes Git, je vous invite à consulter &lt;a href=&#34;http://git-scm.com/docs/gittutorial&#34;&gt;la page tutoriel de Git&lt;/a&gt; ou alors de chercher sur &lt;a href=&#34;http://lmgtfy.com/?q=git+commands&#34;&gt;internet&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>git : quelques astuces de configuration pour vos dotfiles</title>
      <link>http://test.code-troopers.com/2015/05/22/dotfiles-git</link>
      <pubDate>Fri, 22 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://test.code-troopers.com/2015/05/22/dotfiles-git</guid>
      <description>

&lt;p&gt;Cet article est le deuxième de la série des &lt;em&gt;dotfiles&lt;/em&gt;. Voir l&amp;rsquo;article sur &lt;a href=&#34;code-troopers.com/2015/05/15/Dotfiles-vim.html&#34;&gt;vimrc&lt;/a&gt;. Nous allons ici aborder quelques configurations indispensables de git.&lt;/p&gt;

&lt;h1 id=&#34;la-base:83bbafdbb7f3dd4e141ab0d9b554e336&#34;&gt;La base&lt;/h1&gt;

&lt;p&gt;Si vous utilisez git, vous avez forcément fait des commandes de base pour rentrer votre nom et votre email (indispensable pour pusher vos commits)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git config --global user.name &amp;quot;Jango Fett&amp;quot;
$ git config --global user.email &amp;quot;jango.fett@code-troopers.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ceci a pour but d&amp;rsquo;écrire dans votre fichier ~/.gitconfig ces simples lignes :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[user]
    name = Jango Fett
    email = jango.fett@code-troopers.com
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;un-peu-de-couleurs:83bbafdbb7f3dd4e141ab0d9b554e336&#34;&gt;Un peu de couleurs&lt;/h1&gt;

&lt;p&gt;C&amp;rsquo;est toujours important d&amp;rsquo;avoir de la couleur, ça donne bonne mine, ça rend joyeux mais surtout ça aide à la lisibilité. Dans les dernières version de git, la couleur est activée automatiquement, mais vous pouvez toujours la modifier ! Voici un exemple de configuration :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[color &amp;quot;branch&amp;quot;]
    current = yellow reverse
    local = yellow
    remote = green
[color &amp;quot;diff&amp;quot;]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
[color &amp;quot;status&amp;quot;]
    added = yellow
    changed = green
    untracked = cyan
&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&#34;text-align:center;margin-bottom:50px&#34;&gt;
    &lt;a href=&#34;http://test.code-troopers.com/images/postDotfilesGit/gitcolours.png&#34; data-lightbox=&#34;group-1&#34; title=&#34;git avec couleurs personnalisées&#34; class=&#34;inlineBoxes&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;http://test.code-troopers.com/images/postDotfilesGit/gitcolours.png&#34; alt=&#34;git avec couleurs personnalisées&#34;/&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;h1 id=&#34;gitignore-global:83bbafdbb7f3dd4e141ab0d9b554e336&#34;&gt;gitignore global&lt;/h1&gt;

&lt;p&gt;Parfois vous arrivez dans un environnement où personne n&amp;rsquo;utilise IntelliJ, peut-être même que vous voulez cacher le fait que vous utilisez IDEA. Dans ce cas, pas besoin de commiter un .gitignore qui contient &lt;code&gt;.idea&lt;/code&gt; et &lt;code&gt;*.iml&lt;/code&gt; mettez le plutôt dans &lt;code&gt;~/.gitignore&lt;/code&gt;. Pour que ça marche, vous devrez rajouter dans votre &lt;code&gt;~/.gitconfig&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[core]
    excludesfile = ~/.gitignore
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;j-3-vim:83bbafdbb7f3dd4e141ab0d9b554e336&#34;&gt;J&amp;rsquo;&amp;lt;3 vim&lt;/h1&gt;

&lt;p&gt;J&amp;rsquo;aime vim, alors je le met partout. Besoin d&amp;rsquo;un éditeur de texte pour les commits ? vim !&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[core]
    editor = vim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Besoin d&amp;rsquo;un outil pour faire des diff ? vim !&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[merge]
    tool = vimdiff
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;montre-nous-tes-fichiers:83bbafdbb7f3dd4e141ab0d9b554e336&#34;&gt;Montre-nous tes fichiers&lt;/h1&gt;

&lt;p&gt;Vous avez créé un nouveau répertoire, ajouté plein de fichiers dedans, et vous revenez en console pour voir ce qu&amp;rsquo;il y a à commiter. Soit un cas d&amp;rsquo;utilisation quotidien ou presque. Sauf que quand vous faîtes &lt;code&gt;git status&lt;/code&gt; seul le répertoire apparaît et pas les fichiers à l&amp;rsquo;intérieur ! Pour y remédier :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[status]
    showUntrackedFiles = all
&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&#34;text-align:center;margin-bottom:50px&#34;&gt;
    &lt;a href=&#34;http://test.code-troopers.com/images/postDotfilesGit/git-status.png&#34; data-lightbox=&#34;group-1&#34; title=&#34;git status coloré&#34; class=&#34;inlineBoxes&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;http://test.code-troopers.com/images/postDotfilesGit/git-status.png&#34; alt=&#34;git status coloré&#34;/&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;h1 id=&#34;alias:83bbafdbb7f3dd4e141ab0d9b554e336&#34;&gt;Alias&lt;/h1&gt;

&lt;p&gt;Comme pour les shell, on peut créer des alias de commande. Par exemple :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[alias]
    cp = cherry-pick
    co = checkout
    cl = clone
    ci = commit
    br = branch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;C&amp;rsquo;est plus rapide à taper… un peu, et encore faut s&amp;rsquo;en souvenir que cp ça fait cherry-pick. Mais certaines commandes sont longues et là ça devient encore plus pertinent :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    last = log -1 --stat
    st = status -sb
    unstage = reset HEAD --
    dc = diff --cached
    pr = pull --rebase
    lg = log --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %Cblue&amp;lt;%an&amp;gt;%Creset&#39; --abbrev-commit --date=relative --all
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Je vous laisse essayer celles qui ne sont pas explicite ;)&lt;/p&gt;

&lt;h1 id=&#34;les-hooks:83bbafdbb7f3dd4e141ab0d9b554e336&#34;&gt;Les Hooks&lt;/h1&gt;

&lt;p&gt;Il y a beaucoup d&amp;rsquo;options et de choses à faire mais je terminerai cet article avec les hooks, qui mériteraient peut-être à eux seuls un article. Un hook −qui se traduit par « crochet »− va intercepter une commande afin de réaliser une action. Par exemple, quand je lance la commande commit, je veux vérifier que tous les tests passent, ou quand je push, je veux mettre à jour automatiquement le ticket jira associé, on peut vraiment tout faire vu qu&amp;rsquo;il s&amp;rsquo;agit juste de scripts à rajouter.&lt;/p&gt;

&lt;p&gt;On a d&amp;rsquo;abord besoin de définir le répertoire qui va contenir les hooks. Vous pouvez ajouter dans votre &lt;code&gt;~/.gitconfig&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[init]
    templatedir = ~/.git_template
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Par exemple si vous voulez rajouter un script qui interdit de commiter &lt;code&gt;System.out.println&lt;/code&gt;, vous pouvez créer ce fichier : &lt;code&gt;~/.git_template/hooks/pre-commit&lt;/code&gt;
J&amp;rsquo;ai récupéré le mien sur &lt;a href=&#34;https://github.com/borisguery/git-keywords-checker&#34;&gt;https://github.com/borisguery/git-keywords-checker&lt;/a&gt; sur lequel j&amp;rsquo;ai juste modifié les deux variables KEYWORDS_REGEX et EXTENSIONS_REGEX. Ce qui donne grosso modo dans le fichier :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;5 # Add or remove keywords here
6 KEYWORDS_REGEX=&amp;quot;printStackTrace\(|FIXME|TODO&amp;quot;
7 # Add extensions to check here
8 EXTENSIONS_REGEX=&amp;quot;(.java$|.js$)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On interdit de commiter &lt;code&gt;printStackTrace(&lt;/code&gt; ou &lt;code&gt;FIXME&lt;/code&gt; ou &lt;code&gt;TODO&lt;/code&gt; dans les fichiers &lt;code&gt;java&lt;/code&gt; ou &lt;code&gt;js&lt;/code&gt;.&lt;/p&gt;

&lt;div style=&#34;text-align:center;margin-bottom:50px&#34;&gt;
    &lt;a href=&#34;http://test.code-troopers.com/images/postDotfilesGit/git-hooks.png&#34; data-lightbox=&#34;group-1&#34; title=&#34;git hooks pre-commit en action&#34; class=&#34;inlineBoxes&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;http://test.code-troopers.com/images/postDotfilesGit/git-hooks.png&#34; alt=&#34;git hooks pre-commit en action&#34;/&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Oui ça paraît un peu violent d&amp;rsquo;interdire le commit de TODO et FIXME mais on peut passer outre en commitant avec l&amp;rsquo;option &lt;code&gt;--no-verify&lt;/code&gt; et au moins on est au courant donc on n&amp;rsquo;oublie pas les actions nécessaires selon les équipes de travail (ajout d&amp;rsquo;un post-it, d&amp;rsquo;une carte trello etc.)&lt;/p&gt;

&lt;p&gt;2 petits détails pour que ça marche :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Il faut que le script soit exécutable, donc vous pouvez faire &lt;code&gt;chmod +x ~/.git_template/hooks/pre-commit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Ce sera actif uniquement sur les nouveaux dépôts, pour activer le hook sur les dépôts existants, vous devez faire un &lt;code&gt;git init&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Si vous voulez d&amp;rsquo;autres exemples de hooks, vous pouvez commencer par jeter un œil aux hooks de &lt;a href=&#34;https://github.com/petervanderdoes/git-flow-hooks&#34;&gt;git-flow&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>k is the new l, yo</title>
      <link>http://test.code-troopers.com/2014/05/14/kisthenewl</link>
      <pubDate>Wed, 14 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://test.code-troopers.com/2014/05/14/kisthenewl</guid>
      <description>&lt;p&gt;&lt;code&gt;ls&lt;/code&gt; est une des commandes shell les plus utilisées, pourtant depuis les années 70 elle a très peu changé. Bien sûr, il y a de nombreuses options, citons &lt;code&gt;ls -a&lt;/code&gt; pour afficher les fichiers cachés, &lt;code&gt;ls -l&lt;/code&gt; pour afficher plus d&amp;rsquo;informations, &lt;code&gt;ls --color&lt;/code&gt; pour afficher deux couleurs, une pour les fichiers et une pour les répertoires, ou encore &lt;code&gt;ls -rtl&lt;/code&gt; pour trier le contenu par date et afficher le plus récent en dernier.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ls&lt;/code&gt; est donc une commande utile et pratique mais elle n&amp;rsquo;est pas folichonne. D&amp;rsquo;où la naissance de &lt;code&gt;k&lt;/code&gt; qui a pour but de remplacer &lt;code&gt;ls&lt;/code&gt; avec quelques killer features. Il ne s&amp;rsquo;agit pas d&amp;rsquo;une surcouche de &lt;code&gt;ls&lt;/code&gt; mais d&amp;rsquo;une commande complète, s&amp;rsquo;appuyant directement sur &lt;code&gt;stat&lt;/code&gt; par exemple. À ce jour, les nouvelles fonctionnalités sont les suivantes :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;intégration de git status sur un dépôt entier : rouge si le dépôt est &amp;ldquo;sale&amp;rdquo;, vert sinon ;&lt;/li&gt;
&lt;li&gt;intégration de git status à l&amp;rsquo;intérieur d&amp;rsquo;un dépôt : différenciation des fichiers modifiés, non ajoutés ou ignorés ;&lt;/li&gt;
&lt;li&gt;dégradé de couleur pour la taille des fichiers : du vert pour les petits fichiers au rouge pour les gros ;&lt;/li&gt;
&lt;li&gt;dégradé de couleur pour la date de modification : plus la date est affichée en clair et plus le fichier est récent.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Voici un comparatif des deux rendus, version &lt;code&gt;ls&lt;/code&gt; et version &lt;code&gt;k&lt;/code&gt; :&lt;/p&gt;

&lt;p&gt;&lt;div style=&#34;text-align : center&#34;&gt;
&lt;a style=&#34;display: inline&#34; href=&#34;http://test.code-troopers.com/images/postKisTheNewL/lsalcolor.png&#34; data-lightbox=&#34;image-0&#34; title=&#34;version ls -al --color&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;http://test.code-troopers.com/images/postKisTheNewL/lsalcolor_min.png&#34; alt=&#34;version k&#34;/&gt;
&lt;/a&gt;
&lt;a style=&#34;display: inline&#34; href=&#34;http://test.code-troopers.com/images/postKisTheNewL/k.png&#34; data-lightbox=&#34;image-0&#34; title=&#34;version k&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;http://test.code-troopers.com/images/postKisTheNewL/k_min.png&#34; alt=&#34;version k&#34;/&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;k&lt;/code&gt; est disponible uniquement pour zsh. Pour l&amp;rsquo;installer, il suffit de cloner le dépôt &lt;a href=&#34;https://github.com/supercrabtree/k&#34;&gt;git&lt;/a&gt; et d&amp;rsquo;ajouter &lt;code&gt;source ~/path/k/k.sh&lt;/code&gt; dans son ~/.zshrc.
k est encore jeune mais il gagnerait à être connu, il manque quelques fonctions de base comme mettre un répertoire en paramètre ou ne pas afficher les fichiers cachés.
Pour en savoir plus, n&amp;rsquo;hésitez pas à aller voir la page &lt;a href=&#34;https://github.com/supercrabtree/k&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Comme dit leur slogan : «k is the new l, yo».&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>