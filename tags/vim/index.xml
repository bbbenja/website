<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vim on Code-Troopers - Vous avez une idée, nous la réalisons</title>
    <link>http://test.code-troopers.com/tags/vim/</link>
    <description>Recent content in Vim on Code-Troopers - Vous avez une idée, nous la réalisons</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-fr</language>
    <lastBuildDate>Wed, 11 May 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://test.code-troopers.com/tags/vim/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Macro Vim : C&#39;est trop génial</title>
      <link>http://test.code-troopers.com/2016/05/11/vim_macro</link>
      <pubDate>Wed, 11 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://test.code-troopers.com/2016/05/11/vim_macro</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Comme certains d&amp;#8217;entre vous le savent, j&amp;#8217;aime beaucoup Vim. Il n&amp;#8217;y a pas très longtemps au Tours JUG, je disais que je n&amp;#8217;avais pas de cas d&amp;#8217;utilisation des macro dans Vim dont certains disent que c&amp;#8217;est LA killer feature. Et bien j&amp;#8217;ai trouvé un use case et « c&amp;#8217;est trop génial ! » comme dirait Agnès.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;div style=&#34;text-align : center&#34;&gt;
&lt;a class=&#34;inlineBoxes&#34; href=&#34;http://test.code-troopers.com/images/posts/2016-05-VimMacro/trop_genial.gif&#34; data-lightbox=&#34;0&#34; title=&#34;trop génial&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;http://test.code-troopers.com/images/posts/2016-05-VimMacro/trop_genial.gif&#34; alt=&#34;trop génial&#34;/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_angular2_et_macros_vim&#34;&gt;Angular2 et macros Vim&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Les vidéos de Devoxx 2016 sont sorties, dont &lt;a href=&#34;https://www.youtube.com/watch?v=5U4OasGuo0o&#34;&gt;Angular 2 : Préparez vous dès maintenant à la migration (Benoit Lemoine)&lt;/a&gt;. Une des étapes est de passer par les ControllerAs, je ne vais pas refaire la conf ce n&amp;#8217;est pas le but. Bref, je travaille sur un projet qui définit les controllers comme ceci :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;literalblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;$routeProvider.when(&#39;/admin/displayMail&#39;, {templateUrl: &#39;partials/display_mail.html&#39;, controller: &#39;ListMailCtrl&#39;});
$routeProvider.when(&#39;/admin/createEditMail&#39;, {templateUrl: &#39;partials/create_mail.html&#39;, controller: &#39;EditMailCtrl&#39;});
$routeProvider.when(&#39;/admin/createEditMail/:id&#39;, {templateUrl: &#39;partials/create_mail.html&#39;, controller: &#39;EditMailCtrl&#39;});
$routeProvider.when(&#39;/admin/displayUsers&#39;, {templateUrl: &#39;partials/display_users.html&#39;, controller: &#39;DisplayUsersCtrl&#39;});
$routeProvider.when(&#39;/admin/createUser&#39;, {templateUrl: &#39;partials/create_user.html&#39;, controller: &#39;CreateUserCtrl&#39;});
$routeProvider.when(&#39;/admin/updateUser/:login&#39;, {templateUrl: &#39;partials/update_user.html&#39;, controller: &#39;UpdateUserCtrl&#39;});&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Je veux rajouter pour chaque ligne un &lt;code&gt;controllerAs: &#39;monCtrl&#39;&lt;/code&gt; avec comme nom le même que le controller associé mais en commençant par une minuscule, et donc obtenir les lignes ci-dessous. J&amp;#8217;ai extrait 6 controllers mais en réalité il y en a plutôt une cinquantaine (les noms ont été changés si on me demande).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;literalblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;$routeProvider.when(&#39;/admin/displayMail&#39;, {templateUrl: &#39;partials/display_mail.html&#39;, controller: &#39;ListMailCtrl&#39;, controllerAs: &#39;listMailCtrl&#39;});
$routeProvider.when(&#39;/admin/createEditMail&#39;, {templateUrl: &#39;partials/create_mail.html&#39;, controller: &#39;EditMailCtrl&#39;, controllerAs: &#39;editMailCtrl&#39;});
$routeProvider.when(&#39;/admin/createEditMail/:id&#39;, {templateUrl: &#39;partials/create_mail.html&#39;, controller: &#39;EditMailCtrl&#39;, controllerAs: &#39;editMailCtrl&#39;});
$routeProvider.when(&#39;/admin/displayUsers&#39;, {templateUrl: &#39;partials/display_users.html&#39;, controller: &#39;DisplayUsersCtrl&#39;, controllerAs: &#39;displayUsersCtrl&#39;});
$routeProvider.when(&#39;/admin/createUser&#39;, {templateUrl: &#39;partials/create_user.html&#39;, controller: &#39;CreateUserCtrl&#39;, controllerAs: &#39;createUserCtrl&#39;});
$routeProvider.when(&#39;/admin/updateUser/:login&#39;, {templateUrl: &#39;partials/update_user.html&#39;, controller: &#39;UpdateUserCtrl&#39;, controllerAs: &#39;updateUserCtrl&#39;});&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;qa&lt;/code&gt; : on commence la macro, on enregistre dans a&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;/controller:&amp;lt;enter&amp;gt;&lt;/code&gt; : on recherche controller:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;eeee&lt;/code&gt; : on se déplace de mot en mot pour arriver sur le nom du controller&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;yi&#39;&lt;/code&gt; : on copie tout ce qui se trouve à l&amp;#8217;intérieur des &#39; (le nom du controller donc)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ela&lt;/code&gt; : on se déplace vers la droite et on passe en insertion&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;controllerAs: &#39;&#39;&amp;lt;Esc&amp;gt;&lt;/code&gt; : on écrit le texte et on repasse en mode normal&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;hp&lt;/code&gt; : on passe sur la première &#39; et on copie le texte précédemment copié&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;bgur&lt;/code&gt; : on se place au début du mot et on passe la première lettre en minuscule&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;q&lt;/code&gt; : fin de l&amp;#8217;enregistrement&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;50@a&lt;/code&gt; : on joue la macro 50 fois&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;ce qui donne :
&lt;code&gt;qa/controller:&amp;lt;enter&amp;gt;eeeeyi&amp;#8217;era, controllerAs: &#39;&#39;&amp;lt;Esc&amp;gt;cpbgurq50@a&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Juste en lisant le texte, on a l&amp;#8217;impression que c&amp;#8217;est compliqué, avec les explications j&amp;#8217;espère que ça paraît plus simple, en tout cas ça l&amp;#8217;est avec l&amp;#8217;habitude. Cela paraît long aussi mais au final c&amp;#8217;est rapide à taper, il suffit de voir la vidéo qui est en vitesse réelle :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center;margin:50px;&#34;&gt;
&lt;video style=&#34;width: 100%;&#34; controls src=&#34;http://test.code-troopers.com/videos/vim_macro.webm&#34;&gt;&lt;/video&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>vim : 10 astuces de configuration pour vos dotfiles</title>
      <link>http://test.code-troopers.com/2015/05/15/dotfiles-vim</link>
      <pubDate>Fri, 15 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://test.code-troopers.com/2015/05/15/dotfiles-vim</guid>
      <description>

&lt;p&gt;Cet article sera le premier d&amp;rsquo;une série consacrée aux &lt;em&gt;dotfiles&lt;/em&gt;. Alors les &lt;em&gt;dotfiles&lt;/em&gt;, qu&amp;rsquo;est-ce que c&amp;rsquo;est Obi-Wan ? Les &lt;em&gt;dotfiles&lt;/em&gt;, ce sont tous les fichiers texte de configuration que l&amp;rsquo;on peut retrouver dans son répertoire utilisateur pour sauvegarder ses préférences. De nombreux logiciels utilisent cette méthode. On peut citer gnome, IntelliJ, Maven,  ssh, git, bash et tant d&amp;rsquo;autres. On les appelle &lt;em&gt;dotfiles&lt;/em&gt; −que l&amp;rsquo;on peut traduire par fichiers point− parce qu&amp;rsquo;ils ont un nom qui commence par un point, ce qui correspond aux fichiers cachés sous linux.&lt;/p&gt;

&lt;h1 id=&#34;introduction:45eb03a180390a8741dc435049213d05&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Chez les troopers, on est comme beaucoup d&amp;rsquo;autres constamment alliés à la ligne de commande, cf nos articles sur &lt;a href=&#34;http://code-troopers.com/2014/10/01/babun.html&#34;&gt;babun&lt;/a&gt; et &lt;a href=&#34;http://code-troopers.com/2014/09/17/ohMyZsh.html&#34;&gt;oh-my-zsh&lt;/a&gt;. Un outil indispensable dans un terminal est un éditeur de fichier. Dans notre premier article sur les &lt;em&gt;dotfiles&lt;/em&gt; nous parlerons de vim, et plus spécialement de sa configuration avec vimrc. Si vous ne connaissez pas l&amp;rsquo;un des plus puissants éditeur de texte, commencez par vous renseigner dessus et sur les commandes de base par exemple sur &lt;a href=&#34;http://www.openvim.com/tutorial.html&#34;&gt;http://www.openvim.com/tutorial.html&lt;/a&gt;.
Pour configurer vim, une seule chose à faire : &lt;code&gt;vim ~/.vimrc&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;sauvez-c-est-activé:45eb03a180390a8741dc435049213d05&#34;&gt;Sauvez c&amp;rsquo;est activé&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;if has(&amp;quot;autocmd&amp;quot;)
    autocmd! bufwritepost .vimrc source ~/.vimrc
endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De base sous vim on édite son .vimrc, on quitte et on réouvre un fichier pour voir la modification. Grâce à ces lignes, il suffira de sauvegarder pour voir ses modifications actives dans toutes les instances ouvertes de vim.&lt;/p&gt;

&lt;div style=&#34;text-align: center;margin:50px;&#34;&gt;
&lt;video style=&#34;width: 90%; max-width: 600px;&#34; controls src=&#34;http://test.code-troopers.com/videos/dotfiles-saveactif.webm&#34;&gt;&lt;/video&gt;
&lt;/div&gt;

&lt;h1 id=&#34;en-parlant-de-sauvegarde:45eb03a180390a8741dc435049213d05&#34;&gt;En parlant de sauvegarde&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;noremap &amp;lt;C-Z&amp;gt; :update&amp;lt;CR&amp;gt;
vnoremap &amp;lt;C-Z&amp;gt; &amp;lt;C-C&amp;gt;:update&amp;lt;CR&amp;gt;
inoremap &amp;lt;C-Z&amp;gt; &amp;lt;C-O&amp;gt;:update&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pour sauvegarder sous vim, il faut faire &lt;code&gt;:w&lt;/code&gt; Ce serait quand même mieux de faire &lt;code&gt;ctrl-z&lt;/code&gt; un peu à l&amp;rsquo;image des &lt;code&gt;ctrl-s&lt;/code&gt; que l&amp;rsquo;on trouve partout ailleurs.&lt;/p&gt;

&lt;div style=&#34;text-align: center;margin:50px;&#34;&gt;
&lt;video style=&#34;width: 90%; max-width: 600px;&#34;
 controls src=&#34;http://test.code-troopers.com/videos/dotfiles-ctrlz.webm&#34;&gt;&lt;/video&gt;
&lt;/div&gt;

&lt;h1 id=&#34;et-pourquoi-pas-ctrl-s:45eb03a180390a8741dc435049213d05&#34;&gt;Et pourquoi pas ctrl-s&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;inoremap &amp;lt;C-c&amp;gt; &amp;lt;Left&amp;gt;
inoremap &amp;lt;C-t&amp;gt; &amp;lt;Down&amp;gt;
inoremap &amp;lt;C-s&amp;gt; &amp;lt;Up&amp;gt;
inoremap &amp;lt;C-r&amp;gt; &amp;lt;Right&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ça pose un problème car ctrl-s me permet de me déplacer vers le haut dans vim en mode &lt;strong&gt;insertion&lt;/strong&gt;.
Selon la disposition de votre clavier, vous pouvez remplacer &lt;code&gt;c&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;r&lt;/code&gt; par &lt;code&gt;h&lt;/code&gt;, &lt;code&gt;j&lt;/code&gt;, &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;l&lt;/code&gt; si vous avez un clavier azerty. Ainsi les touches &lt;code&gt;hjkl&lt;/code&gt; permettent de se déplacer en mode &lt;strong&gt;visuel&lt;/strong&gt; et &lt;code&gt;ctrl + hjkl&lt;/code&gt; permettent de se déplacer en mode &lt;strong&gt;insertion&lt;/strong&gt;. Plus aucune raison d&amp;rsquo;utiliser les flèches sous vim !&lt;/p&gt;

&lt;div style=&#34;text-align: center;margin:50px;&#34;&gt;
&lt;video style=&#34;width: 90%; max-width: 600px;&#34;
 controls src=&#34;http://test.code-troopers.com/videos/dotfiles-ctrlctsr.webm&#34;&gt;&lt;/video&gt;
&lt;/div&gt;

&lt;h1 id=&#34;un-peu-de-couleurs:45eb03a180390a8741dc435049213d05&#34;&gt;un peu de couleurs&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;syntax on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;vim connaît à peu près tous les langages, de Shell à Java, en passant par le XML ou les simples fichiers de configuration. Avec cette commande,  vous aurez donc automatiquement la coloration syntaxique.&lt;/p&gt;

&lt;div style=&#34;text-align: center;margin:50px;&#34;&gt;
&lt;video style=&#34;width: 90%; max-width: 600px;&#34;
 controls src=&#34;http://test.code-troopers.com/videos/dotfiles-syntax.webm&#34;&gt;&lt;/video&gt;
&lt;/div&gt;

&lt;h1 id=&#34;set-nu:45eb03a180390a8741dc435049213d05&#34;&gt;set nu&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;set number
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pour afficher les numéros de ligne on peut taper &lt;code&gt;:set nu&lt;/code&gt;. La commande est certes rigolote à écrire (comprenne qui pourra) mais ça ne suffit pas pour se retenir de l&amp;rsquo;automatiser.&lt;/p&gt;

&lt;div style=&#34;text-align: center;margin:50px;&#34;&gt;
&lt;video style=&#34;width: 90%; max-width: 600px;&#34;
 controls src=&#34;http://test.code-troopers.com/videos/dotfiles-setnu.webm&#34;&gt;&lt;/video&gt;
&lt;/div&gt;

&lt;h1 id=&#34;éviter-la-touche-échap:45eb03a180390a8741dc435049213d05&#34;&gt;Éviter la touche échap&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;inoremap éé &amp;lt;esc&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pour sortir du mode &lt;strong&gt;insertion&lt;/strong&gt;, il faut appuyer sur la touche échap par défaut. Même pour un pianiste, cette touche est trèèèèès loin sur le clavier. Mais vous pouvez bien évidemment remapper cette action. Si vous voulez des inspirations sur les meilleures combinaisons, vous pouvez regarder là : &lt;a href=&#34;http://vim.wikia.com/wiki/Avoid_the_escape_key&#34;&gt;http://vim.wikia.com/wiki/Avoid_the_escape_key&lt;/a&gt;
Comme je suis en bépo (au lieu de azerty) et que je n&amp;rsquo;écris presque jamais de français avec vim, j&amp;rsquo;ai utilisé le mot clé &lt;code&gt;éé&lt;/code&gt;. Certains mappent sur &lt;code&gt;ii&lt;/code&gt; mais vim marquera une légère pause à chaque appui sur la touche i qui est assez déstabilisant.&lt;/p&gt;

&lt;div style=&#34;text-align: center;margin:50px;&#34;&gt;
&lt;video style=&#34;width: 90%; max-width: 600px;&#34;
 controls src=&#34;http://test.code-troopers.com/videos/dotfiles-exitee.webm&#34;&gt;&lt;/video&gt;
&lt;/div&gt;

&lt;h1 id=&#34;pathogen-https-github-com-tpope-vim-pathogen:45eb03a180390a8741dc435049213d05&#34;&gt;&lt;a href=&#34;https://github.com/tpope/vim-pathogen&#34;&gt;pathogen&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;On peut faire tellement de choses, ça prendrait des semaines pour tout configurer. Pour avoir d&amp;rsquo;autres features super cool en 2 secondes,  on peut ajouter des plugins. Le gestionnaire de plugin le plus connu pour vim est sans doute pathogen.
Pour l&amp;rsquo;installation, il suffit de faire :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p ~/.vim/autoload ~/.vim/bundle &amp;amp;&amp;amp; \
curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Maintenant, passons à quelques plugins.&lt;/p&gt;

&lt;h2 id=&#34;colorscheme-couleurs:45eb03a180390a8741dc435049213d05&#34;&gt;Colorscheme couleurs&lt;/h2&gt;

&lt;p&gt;Les couleurs sont ternes ? le bleu sur noir des commentaires est illisible ? Alors changez les couleurs.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/.vim/bundle
git clone https://github.com/flazz/vim-colorschemes.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ajoutez ensuite &lt;code&gt;colors matrix&lt;/code&gt; dans votre &lt;code&gt;.vimrc&lt;/code&gt;. La liste des template de couleurs utilisables se trouvent dans &lt;code&gt;~/.vim/bundle/colorschemes/colors&lt;/code&gt;.&lt;/p&gt;

&lt;div style=&#34;text-align: center;margin:50px;&#34;&gt;
&lt;video style=&#34;width: 90%; max-width: 600px;&#34;
 controls src=&#34;http://test.code-troopers.com/videos/dotfiles-colormatrix.webm&#34;&gt;&lt;/video&gt;
&lt;/div&gt;

&lt;h2 id=&#34;nerdtree:45eb03a180390a8741dc435049213d05&#34;&gt;nerdtree&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;cd ~/.vim/bundle
git clone https://github.com/scrooloose/nerdtree.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et ajoutez dans votre &lt;code&gt;.vimrc&lt;/code&gt; : &lt;code&gt;map &amp;lt;C-n&amp;gt; :NERDTreeToggle&amp;lt;CR&amp;gt;&lt;/code&gt;
Dorénavant, il vous suffira de faire ctrl-n pour avoir votre répertoire de travail comme dans n&amp;rsquo;importe quel autre IDE.&lt;/p&gt;

&lt;div style=&#34;text-align: center;margin:50px;&#34;&gt;
&lt;video style=&#34;width: 90%; max-width: 600px;&#34;
 controls src=&#34;http://test.code-troopers.com/videos/dotfiles-nerttree.webm&#34;&gt;&lt;/video&gt;
&lt;/div&gt;

&lt;h2 id=&#34;nerdcommenter:45eb03a180390a8741dc435049213d05&#34;&gt;nerdcommenter&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;cd ~/.vim/bundle
git clone https://github.com/scrooloose/nerdcommenter.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et dans votre &lt;code&gt;.vimrc&lt;/code&gt; : &lt;code&gt;filetype plugin on&lt;/code&gt;
aintenant, en faisant &lt;code&gt;&amp;lt;Leader&amp;gt;cc&lt;/code&gt; que ce soit dans un fichier html, java, python, shell etc. la ligne se mettra en commentaire. Vous pouvez aussi le faire après avoir sélectionné plusieurs lignes.
Si vous vous demandez ce qu&amp;rsquo;est la touche &lt;code&gt;&amp;lt;Leader&amp;gt;&lt;/code&gt; c&amp;rsquo;est une touche définie pour faire certaines actions. Par défaut il s&amp;rsquo;agit de la touche &lt;code&gt;\&lt;/code&gt;mais vous pouvez évidemment la remapper. J&amp;rsquo;utilise la touche &lt;code&gt;,&lt;/code&gt; pour ma part grâce à : &lt;code&gt;let mapleader=&amp;quot;,&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;div style=&#34;text-align: center;margin:50px;&#34;&gt;
&lt;video style=&#34;width: 90%; max-width: 600px;&#34;
 controls src=&#34;http://test.code-troopers.com/videos/dotfiles-comment.webm&#34;&gt;&lt;/video&gt;
&lt;/div&gt;

&lt;h1 id=&#34;aller-plus-loin:45eb03a180390a8741dc435049213d05&#34;&gt;Aller plus loin&lt;/h1&gt;

&lt;p&gt;En attendant d&amp;rsquo;autres articles sur les &lt;em&gt;dotfiles&lt;/em&gt;, ou pour aller plus loin dans la configuration de vim, vous pouvez aller faire un tour sur github qui regorge de &lt;em&gt;dotfiles&lt;/em&gt; pour quasiment tous les softs.&lt;/p&gt;

&lt;h1 id=&#34;bonus:45eb03a180390a8741dc435049213d05&#34;&gt;Bonus&lt;/h1&gt;

&lt;p&gt;Si vous aimez vim et IntelliJ, vous pouvez installer le plugin ideavim qui permet d&amp;rsquo;avoir vim comme éditeur de texte et depuis quelques mois vous pouvez même importer vos settings vim dans le plugin :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat ~/.ideavimrc
source ~/.vimrc
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>