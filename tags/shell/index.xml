<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shell on Code-Troopers - Vous avez une idée, nous la réalisons</title>
    <link>https://blog-7460a.firebaseapp.com/tags/shell/</link>
    <description>Recent content in Shell on Code-Troopers - Vous avez une idée, nous la réalisons</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-fr</language>
    <lastBuildDate>Fri, 15 May 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog-7460a.firebaseapp.com/tags/shell/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>vim : 10 astuces de configuration pour vos dotfiles</title>
      <link>https://blog-7460a.firebaseapp.com/2015/05/15/dotfiles-vim</link>
      <pubDate>Fri, 15 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog-7460a.firebaseapp.com/2015/05/15/dotfiles-vim</guid>
      <description>

&lt;p&gt;Cet article sera le premier d&amp;rsquo;une série consacrée aux &lt;em&gt;dotfiles&lt;/em&gt;. Alors les &lt;em&gt;dotfiles&lt;/em&gt;, qu&amp;rsquo;est-ce que c&amp;rsquo;est Obi-Wan ? Les &lt;em&gt;dotfiles&lt;/em&gt;, ce sont tous les fichiers texte de configuration que l&amp;rsquo;on peut retrouver dans son répertoire utilisateur pour sauvegarder ses préférences. De nombreux logiciels utilisent cette méthode. On peut citer gnome, IntelliJ, Maven,  ssh, git, bash et tant d&amp;rsquo;autres. On les appelle &lt;em&gt;dotfiles&lt;/em&gt; −que l&amp;rsquo;on peut traduire par fichiers point− parce qu&amp;rsquo;ils ont un nom qui commence par un point, ce qui correspond aux fichiers cachés sous linux.&lt;/p&gt;

&lt;h1 id=&#34;introduction:45eb03a180390a8741dc435049213d05&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Chez les troopers, on est comme beaucoup d&amp;rsquo;autres constamment alliés à la ligne de commande, cf nos articles sur &lt;a href=&#34;http://code-troopers.com/2014/10/01/babun.html&#34;&gt;babun&lt;/a&gt; et &lt;a href=&#34;http://code-troopers.com/2014/09/17/ohMyZsh.html&#34;&gt;oh-my-zsh&lt;/a&gt;. Un outil indispensable dans un terminal est un éditeur de fichier. Dans notre premier article sur les &lt;em&gt;dotfiles&lt;/em&gt; nous parlerons de vim, et plus spécialement de sa configuration avec vimrc. Si vous ne connaissez pas l&amp;rsquo;un des plus puissants éditeur de texte, commencez par vous renseigner dessus et sur les commandes de base par exemple sur &lt;a href=&#34;http://www.openvim.com/tutorial.html&#34;&gt;http://www.openvim.com/tutorial.html&lt;/a&gt;.
Pour configurer vim, une seule chose à faire : &lt;code&gt;vim ~/.vimrc&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;sauvez-c-est-activé:45eb03a180390a8741dc435049213d05&#34;&gt;Sauvez c&amp;rsquo;est activé&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;if has(&amp;quot;autocmd&amp;quot;)
    autocmd! bufwritepost .vimrc source ~/.vimrc
endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De base sous vim on édite son .vimrc, on quitte et on réouvre un fichier pour voir la modification. Grâce à ces lignes, il suffira de sauvegarder pour voir ses modifications actives dans toutes les instances ouvertes de vim.&lt;/p&gt;

&lt;div style=&#34;text-align: center;margin:50px;&#34;&gt;
&lt;video style=&#34;width: 90%; max-width: 600px;&#34; controls src=&#34;https://blog-7460a.firebaseapp.com/videos/dotfiles-saveactif.webm&#34;&gt;&lt;/video&gt;
&lt;/div&gt;

&lt;h1 id=&#34;en-parlant-de-sauvegarde:45eb03a180390a8741dc435049213d05&#34;&gt;En parlant de sauvegarde&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;noremap &amp;lt;C-Z&amp;gt; :update&amp;lt;CR&amp;gt;
vnoremap &amp;lt;C-Z&amp;gt; &amp;lt;C-C&amp;gt;:update&amp;lt;CR&amp;gt;
inoremap &amp;lt;C-Z&amp;gt; &amp;lt;C-O&amp;gt;:update&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pour sauvegarder sous vim, il faut faire &lt;code&gt;:w&lt;/code&gt; Ce serait quand même mieux de faire &lt;code&gt;ctrl-z&lt;/code&gt; un peu à l&amp;rsquo;image des &lt;code&gt;ctrl-s&lt;/code&gt; que l&amp;rsquo;on trouve partout ailleurs.&lt;/p&gt;

&lt;div style=&#34;text-align: center;margin:50px;&#34;&gt;
&lt;video style=&#34;width: 90%; max-width: 600px;&#34;
 controls src=&#34;https://blog-7460a.firebaseapp.com/videos/dotfiles-ctrlz.webm&#34;&gt;&lt;/video&gt;
&lt;/div&gt;

&lt;h1 id=&#34;et-pourquoi-pas-ctrl-s:45eb03a180390a8741dc435049213d05&#34;&gt;Et pourquoi pas ctrl-s&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;inoremap &amp;lt;C-c&amp;gt; &amp;lt;Left&amp;gt;
inoremap &amp;lt;C-t&amp;gt; &amp;lt;Down&amp;gt;
inoremap &amp;lt;C-s&amp;gt; &amp;lt;Up&amp;gt;
inoremap &amp;lt;C-r&amp;gt; &amp;lt;Right&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ça pose un problème car ctrl-s me permet de me déplacer vers le haut dans vim en mode &lt;strong&gt;insertion&lt;/strong&gt;.
Selon la disposition de votre clavier, vous pouvez remplacer &lt;code&gt;c&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;r&lt;/code&gt; par &lt;code&gt;h&lt;/code&gt;, &lt;code&gt;j&lt;/code&gt;, &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;l&lt;/code&gt; si vous avez un clavier azerty. Ainsi les touches &lt;code&gt;hjkl&lt;/code&gt; permettent de se déplacer en mode &lt;strong&gt;visuel&lt;/strong&gt; et &lt;code&gt;ctrl + hjkl&lt;/code&gt; permettent de se déplacer en mode &lt;strong&gt;insertion&lt;/strong&gt;. Plus aucune raison d&amp;rsquo;utiliser les flèches sous vim !&lt;/p&gt;

&lt;div style=&#34;text-align: center;margin:50px;&#34;&gt;
&lt;video style=&#34;width: 90%; max-width: 600px;&#34;
 controls src=&#34;https://blog-7460a.firebaseapp.com/videos/dotfiles-ctrlctsr.webm&#34;&gt;&lt;/video&gt;
&lt;/div&gt;

&lt;h1 id=&#34;un-peu-de-couleurs:45eb03a180390a8741dc435049213d05&#34;&gt;un peu de couleurs&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;syntax on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;vim connaît à peu près tous les langages, de Shell à Java, en passant par le XML ou les simples fichiers de configuration. Avec cette commande,  vous aurez donc automatiquement la coloration syntaxique.&lt;/p&gt;

&lt;div style=&#34;text-align: center;margin:50px;&#34;&gt;
&lt;video style=&#34;width: 90%; max-width: 600px;&#34;
 controls src=&#34;https://blog-7460a.firebaseapp.com/videos/dotfiles-syntax.webm&#34;&gt;&lt;/video&gt;
&lt;/div&gt;

&lt;h1 id=&#34;set-nu:45eb03a180390a8741dc435049213d05&#34;&gt;set nu&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;set number
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pour afficher les numéros de ligne on peut taper &lt;code&gt;:set nu&lt;/code&gt;. La commande est certes rigolote à écrire (comprenne qui pourra) mais ça ne suffit pas pour se retenir de l&amp;rsquo;automatiser.&lt;/p&gt;

&lt;div style=&#34;text-align: center;margin:50px;&#34;&gt;
&lt;video style=&#34;width: 90%; max-width: 600px;&#34;
 controls src=&#34;https://blog-7460a.firebaseapp.com/videos/dotfiles-setnu.webm&#34;&gt;&lt;/video&gt;
&lt;/div&gt;

&lt;h1 id=&#34;éviter-la-touche-échap:45eb03a180390a8741dc435049213d05&#34;&gt;Éviter la touche échap&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;inoremap éé &amp;lt;esc&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pour sortir du mode &lt;strong&gt;insertion&lt;/strong&gt;, il faut appuyer sur la touche échap par défaut. Même pour un pianiste, cette touche est trèèèèès loin sur le clavier. Mais vous pouvez bien évidemment remapper cette action. Si vous voulez des inspirations sur les meilleures combinaisons, vous pouvez regarder là : &lt;a href=&#34;http://vim.wikia.com/wiki/Avoid_the_escape_key&#34;&gt;http://vim.wikia.com/wiki/Avoid_the_escape_key&lt;/a&gt;
Comme je suis en bépo (au lieu de azerty) et que je n&amp;rsquo;écris presque jamais de français avec vim, j&amp;rsquo;ai utilisé le mot clé &lt;code&gt;éé&lt;/code&gt;. Certains mappent sur &lt;code&gt;ii&lt;/code&gt; mais vim marquera une légère pause à chaque appui sur la touche i qui est assez déstabilisant.&lt;/p&gt;

&lt;div style=&#34;text-align: center;margin:50px;&#34;&gt;
&lt;video style=&#34;width: 90%; max-width: 600px;&#34;
 controls src=&#34;https://blog-7460a.firebaseapp.com/videos/dotfiles-exitee.webm&#34;&gt;&lt;/video&gt;
&lt;/div&gt;

&lt;h1 id=&#34;pathogen-https-github-com-tpope-vim-pathogen:45eb03a180390a8741dc435049213d05&#34;&gt;&lt;a href=&#34;https://github.com/tpope/vim-pathogen&#34;&gt;pathogen&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;On peut faire tellement de choses, ça prendrait des semaines pour tout configurer. Pour avoir d&amp;rsquo;autres features super cool en 2 secondes,  on peut ajouter des plugins. Le gestionnaire de plugin le plus connu pour vim est sans doute pathogen.
Pour l&amp;rsquo;installation, il suffit de faire :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p ~/.vim/autoload ~/.vim/bundle &amp;amp;&amp;amp; \
curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Maintenant, passons à quelques plugins.&lt;/p&gt;

&lt;h2 id=&#34;colorscheme-couleurs:45eb03a180390a8741dc435049213d05&#34;&gt;Colorscheme couleurs&lt;/h2&gt;

&lt;p&gt;Les couleurs sont ternes ? le bleu sur noir des commentaires est illisible ? Alors changez les couleurs.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/.vim/bundle
git clone https://github.com/flazz/vim-colorschemes.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ajoutez ensuite &lt;code&gt;colors matrix&lt;/code&gt; dans votre &lt;code&gt;.vimrc&lt;/code&gt;. La liste des template de couleurs utilisables se trouvent dans &lt;code&gt;~/.vim/bundle/colorschemes/colors&lt;/code&gt;.&lt;/p&gt;

&lt;div style=&#34;text-align: center;margin:50px;&#34;&gt;
&lt;video style=&#34;width: 90%; max-width: 600px;&#34;
 controls src=&#34;https://blog-7460a.firebaseapp.com/videos/dotfiles-colormatrix.webm&#34;&gt;&lt;/video&gt;
&lt;/div&gt;

&lt;h2 id=&#34;nerdtree:45eb03a180390a8741dc435049213d05&#34;&gt;nerdtree&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;cd ~/.vim/bundle
git clone https://github.com/scrooloose/nerdtree.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et ajoutez dans votre &lt;code&gt;.vimrc&lt;/code&gt; : &lt;code&gt;map &amp;lt;C-n&amp;gt; :NERDTreeToggle&amp;lt;CR&amp;gt;&lt;/code&gt;
Dorénavant, il vous suffira de faire ctrl-n pour avoir votre répertoire de travail comme dans n&amp;rsquo;importe quel autre IDE.&lt;/p&gt;

&lt;div style=&#34;text-align: center;margin:50px;&#34;&gt;
&lt;video style=&#34;width: 90%; max-width: 600px;&#34;
 controls src=&#34;https://blog-7460a.firebaseapp.com/videos/dotfiles-nerttree.webm&#34;&gt;&lt;/video&gt;
&lt;/div&gt;

&lt;h2 id=&#34;nerdcommenter:45eb03a180390a8741dc435049213d05&#34;&gt;nerdcommenter&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;cd ~/.vim/bundle
git clone https://github.com/scrooloose/nerdcommenter.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et dans votre &lt;code&gt;.vimrc&lt;/code&gt; : &lt;code&gt;filetype plugin on&lt;/code&gt;
aintenant, en faisant &lt;code&gt;&amp;lt;Leader&amp;gt;cc&lt;/code&gt; que ce soit dans un fichier html, java, python, shell etc. la ligne se mettra en commentaire. Vous pouvez aussi le faire après avoir sélectionné plusieurs lignes.
Si vous vous demandez ce qu&amp;rsquo;est la touche &lt;code&gt;&amp;lt;Leader&amp;gt;&lt;/code&gt; c&amp;rsquo;est une touche définie pour faire certaines actions. Par défaut il s&amp;rsquo;agit de la touche &lt;code&gt;\&lt;/code&gt;mais vous pouvez évidemment la remapper. J&amp;rsquo;utilise la touche &lt;code&gt;,&lt;/code&gt; pour ma part grâce à : &lt;code&gt;let mapleader=&amp;quot;,&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;div style=&#34;text-align: center;margin:50px;&#34;&gt;
&lt;video style=&#34;width: 90%; max-width: 600px;&#34;
 controls src=&#34;https://blog-7460a.firebaseapp.com/videos/dotfiles-comment.webm&#34;&gt;&lt;/video&gt;
&lt;/div&gt;

&lt;h1 id=&#34;aller-plus-loin:45eb03a180390a8741dc435049213d05&#34;&gt;Aller plus loin&lt;/h1&gt;

&lt;p&gt;En attendant d&amp;rsquo;autres articles sur les &lt;em&gt;dotfiles&lt;/em&gt;, ou pour aller plus loin dans la configuration de vim, vous pouvez aller faire un tour sur github qui regorge de &lt;em&gt;dotfiles&lt;/em&gt; pour quasiment tous les softs.&lt;/p&gt;

&lt;h1 id=&#34;bonus:45eb03a180390a8741dc435049213d05&#34;&gt;Bonus&lt;/h1&gt;

&lt;p&gt;Si vous aimez vim et IntelliJ, vous pouvez installer le plugin ideavim qui permet d&amp;rsquo;avoir vim comme éditeur de texte et depuis quelques mois vous pouvez même importer vos settings vim dans le plugin :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat ~/.ideavimrc
source ~/.vimrc
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>ct - alias de projets</title>
      <link>https://blog-7460a.firebaseapp.com/2014/12/15/ct_project_alias</link>
      <pubDate>Mon, 15 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog-7460a.firebaseapp.com/2014/12/15/ct_project_alias</guid>
      <description>

&lt;p&gt;Dans l’équipe Code-Troopers, nous manipulons des technos qui sont assez différentes et qui possèdent chacune un vocabulaire différent qui leur permet de fonctionner en ligne de commande.
Du coup, un de nos problèmes récurrents est de se rappeler quelle commande dois-je lancer lorsque je veux travailler sur tel projet (&lt;code&gt;mvn jetty:run&lt;/code&gt;, &lt;code&gt;gradle assemble&lt;/code&gt;, &lt;code&gt;grunt serve&lt;/code&gt;…).&lt;/p&gt;

&lt;p&gt;Un autre aspect pénible à avoir plein de façons différentes de fonctionner est qu’il est quasiment impossible d’avoir des alias pertinents dans son shell préféré.&lt;/p&gt;

&lt;p&gt;Fort de ce constat, nous avons entrepris d’écrire notre petit outil qui nous permet de moins réflechir quand on change de projet. Puisqu’on est pas super imaginatif et qu’on n’avait pas encore de petit outil à notre nom, nous l’avons nommé “ct”.&lt;/p&gt;

&lt;h2 id=&#34;qu-est-ce-que-c-est:7c3eefad04d6091e508b225df85821df&#34;&gt;Qu’est ce que c’est ?&lt;/h2&gt;

&lt;p&gt;Imaginez que pour chaque projet vous n’ayiez qu’à remplir un fichier (à la façon de votre &lt;code&gt;.gitignore&lt;/code&gt;) pour définir les différentes tâches disponibles. Une fois ceci fait, les autres développeurs n’ont plus à se soucier des tâches à lancer, ils peuvent se contenter d’utiliser le vocabulaire commun, de se placer dans le répertoire du projet et de lancer la commande &lt;code&gt;ct run&lt;/code&gt; au lieu de &lt;code&gt;mvn jetty:run&lt;/code&gt; (et s’ils veulent connaître la liste des tâches disponibles ils le peuvent via un &lt;code&gt;ct help&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Encore mieux, puisque les commandes sont normalisées, vous pouvez directement exporter vos alias qui accélèrent encore l’utilisation (&lt;code&gt;run&lt;/code&gt; pour &lt;code&gt;ct run&lt;/code&gt;), et bingo, c’est transverse pour tous vos projets.&lt;/p&gt;

&lt;h2 id=&#34;comment-ça-marche:7c3eefad04d6091e508b225df85821df&#34;&gt;Comment ça marche ?&lt;/h2&gt;

&lt;p&gt;Le tout est un bête script shell qui utilise quelques commandes de base et quelques outils indispensables à tout développeur.&lt;/p&gt;

&lt;p&gt;Quelques spécificités sont à remarquer en fonction de votre OS :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sous Mac, il est important d’installer gnu-sed en lieu et place de celui d’origine&lt;/li&gt;
&lt;li&gt;sous Windows, il vous faut un shell unix (&lt;a href=&#34;https://blog-7460a.firebaseapp.com/2014/10/01/babun&#34;&gt;Babun&lt;/a&gt; est conseillé).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;comment-l-utiliser:7c3eefad04d6091e508b225df85821df&#34;&gt;Comment l’utiliser ?&lt;/h2&gt;

&lt;p&gt;Tout se fait en très peu d’étapes :&lt;/p&gt;

&lt;h3 id=&#34;installation-de-l-outil:7c3eefad04d6091e508b225df85821df&#34;&gt;Installation de l’outil:&lt;/h3&gt;

&lt;p&gt;Référez-vous au &lt;a href=&#34;https://github.com/code-troopers/ct/blob/master/README.md&#34;&gt;README&lt;/a&gt; présent sur le dépôt &lt;a href=&#34;https://github.com/code-troopers/ct/&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Pour résumer il est juste nécessaire de placer une copie du script dans votre &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CT_TARGET=~/bin;mkdir $CT_TARGET; wget -O $CT_TARGET/ct https://raw.githubusercontent.com/code-troopers/ct/master/ct &amp;amp;&amp;amp; chmod +x $CT_TARGET/ct
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;intégration-dans-un-projet:7c3eefad04d6091e508b225df85821df&#34;&gt;Intégration dans un projet&lt;/h3&gt;

&lt;p&gt;Créez à la racine un fichier nommé &lt;code&gt;.ctproject&lt;/code&gt; qui va contenir vos alias&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;run=’mvn jetty:run’
debug=’mvn jetty:dbg’
test=’mvn test’
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;L’idéal étant de le faire au démarrage du projet, plus de questions à se poser ultérieurement&lt;/p&gt;

&lt;h3 id=&#34;utilisation-dans-un-projet:7c3eefad04d6091e508b225df85821df&#34;&gt;Utilisation dans un projet&lt;/h3&gt;

&lt;p&gt;Il suffit de lancer la commande qui correspond à un alias (par exemple ici : &lt;code&gt;ct run&lt;/code&gt;, &lt;code&gt;ct debug&lt;/code&gt; ou &lt;code&gt;ct test&lt;/code&gt;, ou d’exécuter &lt;code&gt;ct help&lt;/code&gt; pour avoir la liste des alias disponibles).&lt;/p&gt;

&lt;h3 id=&#34;tuning-sur-plusieurs-projets:7c3eefad04d6091e508b225df85821df&#34;&gt;Tuning sur plusieurs projets&lt;/h3&gt;

&lt;p&gt;En définissant votre nomenclature d’alias par projet, vous pourrez vous permettre d’exporter des alias globaux sur vos machines pour appeler &lt;code&gt;ct&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;bonus-lister-les-ports-ouverts:7c3eefad04d6091e508b225df85821df&#34;&gt;Bonus : lister les ports ouverts&lt;/h2&gt;

&lt;p&gt;Puisque nous jonglons souvent entre projets, un autres soucis que nous avons est que nous oublions les ports ouverts pour chacun des projets. En plus, nous avons souvent plusieurs projets de démarrés sans même nous rappeler qu’ils le sont (surtout avec les projets légers REST/AngularJS).&lt;/p&gt;

&lt;p&gt;Nous avons donc rajouté la commande &lt;code&gt;ct ports&lt;/code&gt; qui démarre un micro serveur http et permet de récupérer la liste des ports qui attendent des connexions sur nos machines, ainsi que le dossier de travail associé (ce qui est souvent suffisant pour savoir de quel projet il s’agit).&lt;/p&gt;

&lt;div style=&#34;text-align:center;&#34;&gt;
    &lt;a href=&#34;https://blog-7460a.firebaseapp.com/images/postCT/listen.png&#34; title=&#34;Exemple de listing des ports&#34; data-lightbox=&#34;group1&#34;&gt;
    &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/postCT/listen.png&#34; alt=&#34;Exemple de listing des ports&#34;&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Pour pouvoir utiliser cette commande, il faut que les quelques outils suivants soient installés : &lt;em&gt;netcat&lt;/em&gt;, &lt;em&gt;awk&lt;/em&gt;, &lt;em&gt;wget&lt;/em&gt; et &lt;em&gt;lsof&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;exemple-d-utilisation:7c3eefad04d6091e508b225df85821df&#34;&gt;Exemple d&amp;rsquo;utilisation&lt;/h3&gt;

&lt;div style=&#34;text-align:center;&#34;&gt;
&lt;video width=&#34;90%&#34; controls src=&#34;https://blog-7460a.firebaseapp.com/videos/screencast_ct.webm&#34;&gt;
&lt;object type=&#34;application/x-shockwave-flash&#34; width=&#34;400&#34; height=&#34;222&#34; data=&#34;http://www.youtube.com/v/HVMoJqg41Bw&#34;&gt;
  &lt;param name=&#34;movie&#34; value=&#34;http://www.youtube.com/v/jkWjmGdraR8&#34; /&gt;
  &lt;param name=&#34;wmode&#34; value=&#34;transparent&#34; /&gt;
Screencast d&#39;une utilisation quotidienne de ct. Vous n&#39;avez pas de navigateur moderne, ni Flash installé...
 &lt;/object&gt;&lt;/video&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Babun un shell sous Windows</title>
      <link>https://blog-7460a.firebaseapp.com/2014/10/01/babun</link>
      <pubDate>Wed, 01 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog-7460a.firebaseapp.com/2014/10/01/babun</guid>
      <description>

&lt;h2 id=&#34;oh-non-mon-client-m-oblige-à-être-sous-windows:4926350cdc3d1b77871a61037e1a1233&#34;&gt;Oh non, mon client m&amp;rsquo;oblige à être sous Windows&lt;/h2&gt;

&lt;p&gt;Malheureusement, il est fréquent que nous soyons forcés de travailler sous un environnement que nous n&amp;rsquo;aimons pas. Les raisons sont souvent diverses mais sont presque toujours inflexibles. Le problème est que lorsqu&amp;rsquo;on est habitué à une ligne de commande puissante, le fait d&amp;rsquo;être sous Windows devient un réel handicap.&lt;/p&gt;

&lt;h2 id=&#34;donnez-moi-un-shell:4926350cdc3d1b77871a61037e1a1233&#34;&gt;Donnez moi un shell !&lt;/h2&gt;

&lt;p&gt;Bien sûr, la plupart d&amp;rsquo;entre vous connaîssent Cygwin, qui permet de résoudre bien des problèmes, mais qui en créé aussi un paquet avant d&amp;rsquo;avoir une installation complète et qui fonctionne comme attendu.&lt;/p&gt;

&lt;p&gt;Heureusement,  &lt;a href=&#34;https://twitter.com/tombujok&#34;&gt;Tom Bujok&lt;/a&gt; s&amp;rsquo;est penché sur le souci et a pris le temps de faire une configuration aux petits oignons d&amp;rsquo;un Cygwin complet, avec &lt;code&gt;zsh&lt;/code&gt; et &lt;code&gt;oh-my-zsh&lt;/code&gt; pour avoir une bonne configuration. De plus, pour faire comme si on était sous un unix, on a même un package manager qui permet d&amp;rsquo;installer les outils nécessaires.&lt;/p&gt;

&lt;h2 id=&#34;installation-et-configuration:4926350cdc3d1b77871a61037e1a1233&#34;&gt;Installation et configuration&lt;/h2&gt;

&lt;p&gt;Il suffit de récupérer le zip sur le site officiel &lt;a href=&#34;http://babun.github.io/&#34;&gt;http://babun.github.io&lt;/a&gt; de le dézipper et de lancer le script &lt;code&gt;install.bat&lt;/code&gt;. Ce qui est bien, c&amp;rsquo;est qu&amp;rsquo;il est possible de lancer le script d&amp;rsquo;installation et donc d&amp;rsquo;utiliser babun sans disposer des droits d&amp;rsquo;administrateur sur sa machine.&lt;/p&gt;

&lt;p&gt;Une fois la &lt;em&gt;longue&lt;/em&gt; installation terminée, vous disposez d&amp;rsquo;un shell bien configuré avec la plupart des outils nécessaires bien configurés.&lt;/p&gt;

&lt;p&gt;Cependant vous voudrez certainement personnaliser votre environnement avec quelques alias. Pour ceci, il suffit de créer un fichier contenant vos alias dans &lt;code&gt;~/.oh-my-zsh/custom/aliases.zsh&lt;/code&gt; (le nom est libre, le fichier doit porter l&amp;rsquo;extension  &lt;code&gt;zsh&lt;/code&gt; pour qu&amp;rsquo;il soit automatiquement chargé). Il ne s&amp;rsquo;agit ni plus ni moins de la configuration permise par oh-my-zsh (vous pouvez vous référer &lt;a href=&#34;https://blog-7460a.firebaseapp.com/2014/09/17/ohmyzsh&#34;&gt;à cet article&lt;/a&gt; pour plus de détails)&lt;/p&gt;

&lt;div style=&#34;text-align:center;margin:50px&#34;&gt;
 &lt;a style=&#34;display: inline&#34; href=&#34;https://blog-7460a.firebaseapp.com/images/postBabun/babun.png&#34; data-lightbox=&#34;image-0&#34; title=&#34;Babun et tmux&#34;&gt;
         &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/postBabun/babun.png&#34; alt=&#34;Babun et tmux&#34;/&gt;
 &lt;/a&gt;
&lt;/div&gt;

&lt;h2 id=&#34;conseils-pratiques:4926350cdc3d1b77871a61037e1a1233&#34;&gt;Conseils pratiques&lt;/h2&gt;

&lt;p&gt;Depuis quelques temps, nous sommes quelques membres de l&amp;rsquo;équipe à &lt;strong&gt;devoir&lt;/strong&gt; travailler  sous Windows. Nous avons rapidement ajouté &lt;code&gt;tmux&lt;/code&gt; à la liste des outils indispensables (la gestion des terminaux Windows n&amp;rsquo;étant pas optimale) ainsi que &lt;code&gt;irssi&lt;/code&gt; en tant que client IRC.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pact install tmux irssi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Puisque c&amp;rsquo;est ni plus ni moins qu&amp;rsquo;une installation de Cygwin, l&amp;rsquo;accès à vos disque se fera par le montage &lt;code&gt;/cygdrive/c/&lt;/code&gt; pour le disque &lt;code&gt;C:&lt;/code&gt; par exemple. Veuillez noter également que l&amp;rsquo;emplacement de votre &lt;code&gt;home&lt;/code&gt; sera en fait &lt;code&gt;/cygdrive/c/Users/$USER/.babun/cygwin/home/$USER&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Maintenant, vous serez presque aussi productifs sous Windows que sous un système &amp;ldquo;agréable&amp;rdquo; !&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>oh-my-zsh : l&#39;outil indispensable pour avoir un zsh bien configuré.</title>
      <link>https://blog-7460a.firebaseapp.com/2014/09/17/ohmyzsh</link>
      <pubDate>Wed, 17 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog-7460a.firebaseapp.com/2014/09/17/ohmyzsh</guid>
      <description>

&lt;h2 id=&#34;introduction:26f51ad9c57c25287250bbb029ab80fa&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Que l&amp;rsquo;on soit dev, ops, sysadmin ou autre pour effectuer nos tâches répétitives et quotidiennes on a généralement deux possibilités : une première communément appelée &amp;ldquo;clic-clic&amp;rdquo; qui consiste à utiliser les interfaces graphiques aussi souvent que possible (afin de perdre un maximum de temps) ; et une seconde qualifiée de &amp;ldquo;barbue&amp;rdquo; qui elle est orientée ligne de commande, scripting et automatisation.
Nous les Code-Troopers, on est plutôt technique de barbus ! Et donc peut importe l&amp;rsquo;OS qu&amp;rsquo;on utilise on cherche toujours à avoir le meilleur terminal possible.
Par défaut sous linux ou mac OS on trouvera souvent &lt;em&gt;bash&lt;/em&gt;, sous windows ce sera &lt;em&gt;powershell&lt;/em&gt; mais il en existe d’autres comme &lt;em&gt;csh&lt;/em&gt;, &lt;em&gt;ksh&lt;/em&gt; ou dans le cas qui nous intéresse &lt;em&gt;zsh&lt;/em&gt;.
&lt;em&gt;zsh&lt;/em&gt; est puissant mais ce n’est pas le sujet du jour de dire pourquoi il serait mieux qu’un autre. En revanche, qui dit puissance dit difficultés de paramétrage ;
d’ailleurs à la première utilisation lorsque l’on n’a pas de fichier de configuration il commence par dire qu’il peut en créer un pour nous mais qu’il faudra le modifier à la main.
Ce sera inutile grâce à &lt;em&gt;oh-my-zsh&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;installation:26f51ad9c57c25287250bbb029ab80fa&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;C&amp;rsquo;est très simple, il suffit de cloner le dépôt
&lt;code&gt;git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh&lt;/code&gt;
Et de mettre le fichier de configuration dans son home
&lt;code&gt;cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;les-thèmes:26f51ad9c57c25287250bbb029ab80fa&#34;&gt;Les thèmes&lt;/h2&gt;

&lt;p&gt;Premièrement, les couleurs. Chacun ses goûts mais comme tout  informaticien fan de  matrix on a tendance à configurer son terminal pour obtenir du vert sur fond noir donc on choisira un thème en conséquence pour avoir des couleurs claires (ce qui est le cas de presque tous les thèmes) Vous pouvez voir un aperçu des thèmes ici : &lt;a href=&#34;http://zshthem.es/all/&#34;&gt;http://zshthem.es/all/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Deuxièmement le prompt. Toujours sur le site &lt;a href=&#34;http://zshthem.es&#34;&gt;http://zshthem.es&lt;/a&gt;, vous pouvez voir qu’en plus des couleurs, chaque thème a un prompt différent. C&amp;rsquo;est ce qui s&amp;rsquo;affiche à chaque ligne donc il doit être beau, rapide et fonctionnel.
J&amp;rsquo;utilisais &lt;a href=&#34;https://github.com/nojhan/liquidprompt&#34;&gt;https://github.com/nojhan/liquidprompt&lt;/a&gt; pendant un temps, j&amp;rsquo;ai donc fait un thème qui ressemble pour les fonctionnalités qui me manquaient. Les fonctionnalités que je trouve pratique :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;l&amp;rsquo;heure à droite : je veux savoir à quelle heure j&amp;rsquo;ai lancé une commande et à quelle heure elle s&amp;rsquo;est finie. C&amp;rsquo;est utile de temps en temps.&lt;/li&gt;
&lt;li&gt;l&amp;rsquo;utilisateur courant : je veux savoir avec quel utilisateur je suis connecté, simplement parce que je veux que ça crie si je suis en root pour éviter de faire des bêtises&lt;/li&gt;
&lt;li&gt;le hostname : je veux savoir sur quelle machine je suis connecté, de préférence uniquement lorsque je suis en ssh sinon c&amp;rsquo;est pas utile, toujours dans le but d&amp;rsquo;éviter les bêtises.&lt;/li&gt;
&lt;li&gt;un path de taille limitée : pas besoin d&amp;rsquo;afficher &lt;code&gt;/home/mattboll/workspace/projetSecret/java/com/codetroopers/projetxx/machin/bean&lt;/code&gt; il me suffit de lire &lt;code&gt;~/.../machin/bean&lt;/code&gt; pour savoir où je suis et ça permet de toujours avoir un prompt de taille raisonnable, c&amp;rsquo;est plus agréable.&lt;/li&gt;
&lt;li&gt;des infos git : sur quelle branche je suis, est-ce que je suis synchro, est-ce que je dois merger, combien j&amp;rsquo;ai de commits en attente d&amp;rsquo;être pushé etc.&lt;/li&gt;
&lt;li&gt;le code retour de la commande : parfois des commandes sont en erreur mais on n’a pas de message, donc on ne sait pas si la commande s’est bien exécutée, et en supposant qu’elle soit mal exécutée on ne sait pas quelle était l’erreur (l’équivalent des erreurs 404, 503 etc. des erreurs http)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pour choisir le thème il faut éditer le fichier &lt;code&gt;~/.zshrc&lt;/code&gt; et modifier la ligne
&lt;code&gt;ZSH_THEME=”nom_du_theme”&lt;/code&gt; où nom du thème correspond au nom de fichier que l’on peut trouver dans &lt;code&gt;~/.oh-my-zsh/themes&lt;/code&gt;. Du coup, pour réaliser un thème personnel c’est simple il suffit de créer un fichier qui s’appelle nom.zsh-theme et de le mettre dans le même répertoire que les autres.
Voici ce que cela donne avec mon thème (adapté du thème sunrise), que vous pouvez trouver  sur &lt;a href=&#34;https://raw.githubusercontent.com/mattboll/zshrc/master/mattboll.zsh-theme&#34;&gt;GitHub&lt;/a&gt; :&lt;/p&gt;

&lt;div style=&#34;text-align:center;margin:50px&#34;&gt;
&lt;a style=&#34;display: inline&#34; href=&#34;https://blog-7460a.firebaseapp.com/images/postOhMyZsh/oh-my-zsh-theme.png&#34; data-lightbox=&#34;image-0&#34; title=&#34;Thème oh-my-zsh&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/postOhMyZsh/oh-my-zsh-theme.png&#34; alt=&#34;Thème oh-my-zsh&#34;/&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;h2 id=&#34;les-plugins:26f51ad9c57c25287250bbb029ab80fa&#34;&gt;Les plugins&lt;/h2&gt;

&lt;p&gt;Les plugins permettent d&amp;rsquo;incorporer des fonctions spécifiques. Ce sont en général de simples alias mais il arrive aussi de tomber sur des fonctions utiles auxquelles on ne pense pas, par exemple en activant le plugin GitHub, on accède à la commande &lt;code&gt;empty_gh&lt;/code&gt; qui prend en paramètre le nom du dépôt et qui va créer le répertoire, faire un git init, ajouter un readme vide et faire le premier commit.
Pour ajouter des plugins, il faut évidemment éditer le fichier &lt;code&gt;~/.zshrc&lt;/code&gt; et modifier la ligne &lt;code&gt;plugins=(liste des plugins)&lt;/code&gt;
Vous trouverez la liste des plugins dans &lt;code&gt;~/.oh-my-zsh/plugins&lt;/code&gt; À l’heure où j’écris il y en a 172, de git à symfony en passant par heroku. Pour savoir à quoi ça correspond, le plus simple est de lire le code source, en général il y a un fichier par plugin et les noms sont assez explicites pour savoir ceux qui nous seront utiles ou pas.&lt;/p&gt;

&lt;h2 id=&#34;les-libs:26f51ad9c57c25287250bbb029ab80fa&#34;&gt;Les libs&lt;/h2&gt;

&lt;p&gt;Si vous voulez créer un plugin ou que vous voulez voir un peu plus les fonctionnalités de oh-my-zsh, vous pouvez parcourir le répertoire lib, ne serait-ce que pour le fichier aliases.zsh qui définit des alias de base, par exemple &lt;code&gt;“…”=”cd ../..”&lt;/code&gt; ou les habituels &lt;code&gt;la&lt;/code&gt;, &lt;code&gt;ll&lt;/code&gt; etc. C’est aussi dans ce répertoire que sont définies des fonctions génériques comme celle qui permet de savoir si le dépôt git est “dirty” et qui est utilisée dans certains prompts.&lt;/p&gt;

&lt;p&gt;Si vous voulez plus d’informations sur zsh je vous invite à commencer par l’article de &lt;a href=&#34;http://wiki.gcu.info/doku.php?id=unix:zsh_le_z_shell&#34;&gt;gcu-squad&lt;/a&gt;. Pour oh-my-zsh vous pouvez allez voir le projet sur &lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh&#34;&gt;GitHub&lt;/a&gt;. Enfin, si vous avez d’autres questions, n’hésitez pas à poster un commentaire ou à en parler sur twitter &lt;a href=&#34;http://twitter.com/codetroopers&#34;&gt;@codetroopers&lt;/a&gt; ou &lt;a href=&#34;http://twitter.com/mattboll&#34;&gt;@mattboll&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>k is the new l, yo</title>
      <link>https://blog-7460a.firebaseapp.com/2014/05/14/kisthenewl</link>
      <pubDate>Wed, 14 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog-7460a.firebaseapp.com/2014/05/14/kisthenewl</guid>
      <description>&lt;p&gt;&lt;code&gt;ls&lt;/code&gt; est une des commandes shell les plus utilisées, pourtant depuis les années 70 elle a très peu changé. Bien sûr, il y a de nombreuses options, citons &lt;code&gt;ls -a&lt;/code&gt; pour afficher les fichiers cachés, &lt;code&gt;ls -l&lt;/code&gt; pour afficher plus d&amp;rsquo;informations, &lt;code&gt;ls --color&lt;/code&gt; pour afficher deux couleurs, une pour les fichiers et une pour les répertoires, ou encore &lt;code&gt;ls -rtl&lt;/code&gt; pour trier le contenu par date et afficher le plus récent en dernier.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ls&lt;/code&gt; est donc une commande utile et pratique mais elle n&amp;rsquo;est pas folichonne. D&amp;rsquo;où la naissance de &lt;code&gt;k&lt;/code&gt; qui a pour but de remplacer &lt;code&gt;ls&lt;/code&gt; avec quelques killer features. Il ne s&amp;rsquo;agit pas d&amp;rsquo;une surcouche de &lt;code&gt;ls&lt;/code&gt; mais d&amp;rsquo;une commande complète, s&amp;rsquo;appuyant directement sur &lt;code&gt;stat&lt;/code&gt; par exemple. À ce jour, les nouvelles fonctionnalités sont les suivantes :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;intégration de git status sur un dépôt entier : rouge si le dépôt est &amp;ldquo;sale&amp;rdquo;, vert sinon ;&lt;/li&gt;
&lt;li&gt;intégration de git status à l&amp;rsquo;intérieur d&amp;rsquo;un dépôt : différenciation des fichiers modifiés, non ajoutés ou ignorés ;&lt;/li&gt;
&lt;li&gt;dégradé de couleur pour la taille des fichiers : du vert pour les petits fichiers au rouge pour les gros ;&lt;/li&gt;
&lt;li&gt;dégradé de couleur pour la date de modification : plus la date est affichée en clair et plus le fichier est récent.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Voici un comparatif des deux rendus, version &lt;code&gt;ls&lt;/code&gt; et version &lt;code&gt;k&lt;/code&gt; :&lt;/p&gt;

&lt;p&gt;&lt;div style=&#34;text-align : center&#34;&gt;
&lt;a style=&#34;display: inline&#34; href=&#34;https://blog-7460a.firebaseapp.com/images/postKisTheNewL/lsalcolor.png&#34; data-lightbox=&#34;image-0&#34; title=&#34;version ls -al --color&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/postKisTheNewL/lsalcolor_min.png&#34; alt=&#34;version k&#34;/&gt;
&lt;/a&gt;
&lt;a style=&#34;display: inline&#34; href=&#34;https://blog-7460a.firebaseapp.com/images/postKisTheNewL/k.png&#34; data-lightbox=&#34;image-0&#34; title=&#34;version k&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/postKisTheNewL/k_min.png&#34; alt=&#34;version k&#34;/&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;k&lt;/code&gt; est disponible uniquement pour zsh. Pour l&amp;rsquo;installer, il suffit de cloner le dépôt &lt;a href=&#34;https://github.com/supercrabtree/k&#34;&gt;git&lt;/a&gt; et d&amp;rsquo;ajouter &lt;code&gt;source ~/path/k/k.sh&lt;/code&gt; dans son ~/.zshrc.
k est encore jeune mais il gagnerait à être connu, il manque quelques fonctions de base comme mettre un répertoire en paramètre ou ne pas afficher les fichiers cachés.
Pour en savoir plus, n&amp;rsquo;hésitez pas à aller voir la page &lt;a href=&#34;https://github.com/supercrabtree/k&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Comme dit leur slogan : «k is the new l, yo».&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>