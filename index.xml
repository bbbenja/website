<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code-Troopers - Vous avez une idée, nous la réalisons</title>
    <link>https://blog-7460a.firebaseapp.com/</link>
    <description>Recent content on Code-Troopers - Vous avez une idée, nous la réalisons</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-fr</language>
    <lastBuildDate>Fri, 20 May 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog-7460a.firebaseapp.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Devoxx 2016 : Huntly ou rien !</title>
      <link>https://blog-7460a.firebaseapp.com/2016/05/20/devoxx-2016-huntly</link>
      <pubDate>Fri, 20 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog-7460a.firebaseapp.com/2016/05/20/devoxx-2016-huntly</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An english version of this blogpost is published on Michaël Bitard&amp;#8217;s blog at &lt;a href=&#34;https://agileek.github.io/java/2016/05/19/devoxx_2016_huntly/&#34;&gt;agileek.github.io&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Cette année pour Devoxx, j’étais le seul Code-Troopers disponible mais ce n’est pas grave car j’y ai retrouvé Michaël, ancien collègue tourangeau maintenant basé à Toulouse.
On va vous raconter ici comment on s’est bien amusés pendant ces 3 jours.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Pour l&amp;#8217;édition 2016 de DevoxxFR, il y avait une nouveauté qui aurait probablement dû arriver bien plus tôt, il s’agit des applications mobiles officielles.&lt;br&gt;
Rien de bien révolutionnaire à ça vous allez me dire, et je suis d&amp;#8217;accord car les années précédentes des âmes charitables prenaient de leur temps pour sortir une application permettant d&amp;#8217;avoir le programme dans sa poche.&lt;br&gt;
Mais en plus de l’application permettant de voir et gérer le programme &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.devoxx&#34;&gt;My devoxx&lt;/a&gt;,&lt;br&gt;
il y a eu de publié sur les stores l’application &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.devoxx.huntly&#34;&gt;Devoxx Huntly&lt;/a&gt; qui a pour tag line “Win tickets for devoxx events”. Autant le dire tout de suite, jouer pour gagner des places pour Devoxx, ça mérite un peu plus d’attention.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Pour ce qui va suivre nous allons uniquement parler de celle disponible sur Android car c’est celle que nous avons utilisée.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;div style=&#34;text-align : center&#34;&gt;
&lt;a class=&#34;inlineBoxes&#34; href=&#34;https://blog-7460a.firebaseapp.com/images/posts/2016-05-DevoxxHuntly/devoxx2016_huntly_tag_app1.png&#34; data-lightbox=&#34;2&#34; title=&#34;Devoxx Huntly screenshot&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/posts/2016-05-DevoxxHuntly/devoxx2016_huntly_tag_app1_min.png&#34; alt=&#34;Devoxx Huntly screenshot&#34;/&gt;
&lt;/a&gt;
&lt;a class=&#34;inlineBoxes&#34; href=&#34;https://blog-7460a.firebaseapp.com/images/posts/2016-05-DevoxxHuntly/devoxx2016_huntly_tag_app2.png&#34; data-lightbox=&#34;2&#34; title=&#34;Devoxx Huntly screenshot - Liste des quêtes&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/posts/2016-05-DevoxxHuntly/devoxx2016_huntly_tag_app2_min.png&#34; alt=&#34;Devoxx Huntly screenshot - Liste de quêtes&#34;/&gt;
&lt;/a&gt;
&lt;a class=&#34;inlineBoxes&#34; href=&#34;https://blog-7460a.firebaseapp.com/images/posts/2016-05-DevoxxHuntly/devoxx2016_huntly_tag_app3.png&#34; data-lightbox=&#34;2&#34; title=&#34;Devoxx Huntly screenshot - Quête terminée&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/posts/2016-05-DevoxxHuntly/devoxx2016_huntly_tag_app3_min.png&#34; alt=&#34;Devoxx Huntly screenshot - Quête terminée&#34;/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_comment_ça_marche_et_quel_est_le_but&#34;&gt;Comment ça marche et quel est le but ?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Le but est assez simple, avoir le plus de points. Comment ça marche ? En scannant des QR codes comme ceux ci-dessous via l&amp;#8217;application. Un jeu d&amp;#8217;enfant donc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Le côté sympa de la chose c&amp;#8217;est que les QR codes étaient présents sur chacun des stands des exposants. C&amp;#8217;est donc un moyen sympa de tous les faire.
C&amp;#8217;est donc ce que l&amp;#8217;on a fait.
Et dans la plupart des cas, le fait d&amp;#8217;aller scanner le QR code sur place était un bon moyen pour arriver sur le stand et commencer la conversation avec les personnes présentes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Parfois (surtout le premier jour) nous avons dû expliquer ce qu&amp;#8217;était ce fameux QR code (voir même le trouver sur le stand) et à quoi il servait (nous avons trouvé dommage que les stands n&amp;#8217;aient pas été plus au courant de l&amp;#8217;existence de huntly)
On ne va pas se mentir non plus, on n&amp;#8217;a pas parlé à tous les exposants, certains stands sont moins sympas à aller voir que d&amp;#8217;autres, et dans ce cas, on a un peu esquivé.
Mais il faut quand même avouer que cette année, j&amp;#8217;ai parlé à beaucoup plus d&amp;#8217;exposants que les années précédentes, sans aucun doute du fait de l&amp;#8217;appli.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Étant donné que c&amp;#8217;est la première mise en place,
il y avait forcément quelques petites retouches à faire,
et sur ce coup-là on peut dire que la team de scalac était au taquet car il y a eu au moins 2 updates durant les trois jours qui ont permis de corriger notamment un problème avec l&amp;#8217;api twitter et un autre avec le scan de contact (2 updates en 3 jours, je parle toujours de l&amp;#8217;appli Android, parce que bon, sur iOS&amp;#8230;&amp;#8203; :p)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;div style=&#34;text-align : center&#34;&gt;
&lt;a class=&#34;inlineBoxes&#34; href=&#34;https://blog-7460a.firebaseapp.com/images/posts/2016-05-DevoxxHuntly/devoxx2016_huntly_tag_stand1.png&#34; data-lightbox=&#34;0&#34; title=&#34;QRCode sur le stant Aldebaran&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/posts/2016-05-DevoxxHuntly/devoxx2016_huntly_tag_stand1_min.png&#34; alt=&#34;QRCode sur le stant Aldebaran&#34;/&gt;
&lt;/a&gt;
&lt;a class=&#34;inlineBoxes&#34; href=&#34;https://blog-7460a.firebaseapp.com/images/posts/2016-05-DevoxxHuntly/devoxx2016_huntly_tag_stand2.png&#34; data-lightbox=&#34;0&#34; title=&#34;QRCode sur le stand SII&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/posts/2016-05-DevoxxHuntly/devoxx2016_huntly_tag_stand2_min.png&#34; alt=&#34;QRCode sur le stand SII&#34;/&gt;
&lt;/a&gt;
&lt;a class=&#34;inlineBoxes&#34; href=&#34;https://blog-7460a.firebaseapp.com/images/posts/2016-05-DevoxxHuntly/devoxx2016_huntly_tag_stand3.png&#34; data-lightbox=&#34;0&#34; title=&#34;QRCode sur le stand Stackoverflow&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/posts/2016-05-DevoxxHuntly/devoxx2016_huntly_tag_stand3_min.png&#34; alt=&#34;QRCode sur le stand Stackoverflow&#34;/&gt;
&lt;/a&gt;
&lt;a class=&#34;inlineBoxes&#34; href=&#34;https://blog-7460a.firebaseapp.com/images/posts/2016-05-DevoxxHuntly/devoxx2016_huntly_tag_stand4.png&#34; data-lightbox=&#34;0&#34; title=&#34;QRCode sur le stand Amazon&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/posts/2016-05-DevoxxHuntly/devoxx2016_huntly_tag_stand4_min.png&#34; alt=&#34;QRCode sur le stand Amazon&#34;/&gt;
&lt;/a&gt;
&lt;a class=&#34;inlineBoxes&#34; href=&#34;https://blog-7460a.firebaseapp.com/images/posts/2016-05-DevoxxHuntly/devoxx2016_huntly_tag_stand_huntly.png&#34; data-lightbox=&#34;0&#34; title=&#34;Le stand de Devoxx Huntly&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/posts/2016-05-DevoxxHuntly/devoxx2016_huntly_tag_stand_huntly_min.png&#34; alt=&#34;Le stand de Devoxx Huntly&#34;/&gt;
&lt;/a&gt;
&lt;a class=&#34;inlineBoxes&#34; href=&#34;https://blog-7460a.firebaseapp.com/images/posts/2016-05-DevoxxHuntly/devoxx2016_huntly_tag_porte.png&#34; data-lightbox=&#34;0&#34; title=&#34;QRCode sur une porte de salle&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/posts/2016-05-DevoxxHuntly/devoxx2016_huntly_tag_porte_min.png&#34; alt=&#34;QRCode sur une porte de salle&#34;/&gt;
&lt;/a&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_ce_qui_nous_a_plu&#34;&gt;Ce qui nous a plu&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Quand on est dans une conférence pour développeurs, on peut s’attendre à voir des filous tenter de feinter/hacker/tricher, quoi.
Ça n’a pas tardé car quelques heures après le début du jeu on a remarqué une personne qui semblait avoir vachement plus d’avance que tout le monde (Frédéric Camblor pour ne pas le citer).
Il s’est lui-même dénoncé au stand, ça lui a valu un direct de Stefan, en expliquant qu’il avait profité du fait que la communication avec le serveur était en ssl au lieu de tls pour intercepter les communications et envoyer des informations au serveur.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;div style=&#34;text-align : center&#34;&gt;
&lt;a class=&#34;inlineBoxes&#34; href=&#34;https://blog-7460a.firebaseapp.com/images/posts/2016-05-DevoxxHuntly/devoxx2016_huntly_stephan_pushing_fcamblor.png&#34; data-lightbox=&#34;4&#34; title=&#34;Stephan maltraitant Frédéric&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/posts/2016-05-DevoxxHuntly/devoxx2016_huntly_stephan_pushing_fcamblor.png&#34; alt=&#34;Stephan maltraitant Frédéric&#34;/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_ce_qui_n_a_pas_trop_marché&#34;&gt;Ce qui n&amp;#8217;a pas trop marché&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Certaines des quêtes étaient des check-ins, il s&amp;#8217;agissait de passer dans toutes les salles où il y avait des confs et normalement, il y avait des beacons qui devaient permettre de détecter automatiquement qu&amp;#8217;on était dans la bonne zone.
Malheureusement je n&amp;#8217;ai jamais capté un seul signal, même avec mon bluetooth allumé tout le temps.
D&amp;#8217;ailleurs, si quelqu’un a capté un signal, je suis curieux de savoir comment ça marchait (le seul signal qui a été capté était le beacon que j’avais dans le sac, et il a été capté par Michaël au bout d’une heure de binomage lors d’un workshop).
Mais bon ce n&amp;#8217;est pas grave car il y avait en backup des QR codes pour faire ces quêtes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_Évolutions&#34;&gt;Évolutions&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Bien qu&amp;#8217;on ait fait le tour de tous les stands, celui sur lequel on a passé le plus de temps reste celui de devoxx huntly.
Nous avons parlé des choses à modifier pour les prochaines éditions, notamment en ce qui concerne les quêtes afin de gagner encore plus de points !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Parmi les points qui pourront être améliorés on peut citer par exemple :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Une meilleure gestion des points perdus : en effet, derrière certains QR codes se cachaient des questions, or même si on avait plusieurs tentatives pour y répondre, le fait de se tromper une ou deux fois diminuait le nombre de points gagnés. C&amp;#8217;était une bonne idée mais pour la comprendre, il a fallu que les dev de l&amp;#8217;appli l&amp;#8217;expliquent.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;La première quête en lançant l&amp;#8217;appli consiste à entrer un code de parrainage, le problème c&amp;#8217;est que lorsque l&amp;#8217;on est dans les premiers à installer l&amp;#8217;appli, il n&amp;#8217;y a personne pour donner un code, ce qui est plutôt dommage.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pour chacune des quêtes le fait de publier un message sur twitter permettait de gagner des points en plus, le problème c&amp;#8217;est qu&amp;#8217;avec plus de 50 quêtes, et à chaque fois le même message, ça ressemble plus à du spam qu&amp;#8217;autre chose.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;La chose la plus fun à améliorer pour moi sera de réussir à coupler l&amp;#8217;appli aux nombreux jeux prévus par les exposants. Avoir un classement global parmi tous les jeux de tous les stands, là ça serait vraiment le top.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;L’annonce des vainqueurs a donc eu lieu durant &lt;a href=&#34;https://youtu.be/h2hA3TSTdpw?t=4m13s&#34;&gt;l’épisode des casts codeurs&lt;/a&gt; auquel nous n’avons pas pu assister cette année.
Et Michaël a donc bien gagné sa place pour DevoxxFR 2017. Quant à moi, ce n’est que partie remise.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;div style=&#34;text-align : center&#34;&gt;
&lt;a class=&#34;inlineBoxes&#34; href=&#34;https://blog-7460a.firebaseapp.com/images/posts/2016-05-DevoxxHuntly/devoxx2016_huntly_classment_final.png&#34; data-lightbox=&#34;1&#34; title=&#34;Classement final&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/posts/2016-05-DevoxxHuntly/devoxx2016_huntly_classment_final_min.png&#34; alt=&#34;Classement final&#34;/&gt;
&lt;/a&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Le code source de MyDevoxx est sur github : &lt;a href=&#34;https://github.com/devoxx/AndroidMobileApp&#34; class=&#34;bare&#34;&gt;https://github.com/devoxx/AndroidMobileApp&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;En tout cas, sachant que ces applications vont être utilisées pour chaque Devoxx,
on peut être sûrs que ça va vite évoluer et qu’on aura quelque chose de plus abouti pour Devoxx France l’année prochaine !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Macro Vim : C&#39;est trop génial</title>
      <link>https://blog-7460a.firebaseapp.com/2016/05/11/vim_macro</link>
      <pubDate>Wed, 11 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog-7460a.firebaseapp.com/2016/05/11/vim_macro</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Comme certains d&amp;#8217;entre vous le savent, j&amp;#8217;aime beaucoup Vim. Il n&amp;#8217;y a pas très longtemps au Tours JUG, je disais que je n&amp;#8217;avais pas de cas d&amp;#8217;utilisation des macro dans Vim dont certains disent que c&amp;#8217;est LA killer feature. Et bien j&amp;#8217;ai trouvé un use case et « c&amp;#8217;est trop génial ! » comme dirait Agnès.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;div style=&#34;text-align : center&#34;&gt;
&lt;a class=&#34;inlineBoxes&#34; href=&#34;https://blog-7460a.firebaseapp.com/images/posts/2016-05-VimMacro/trop_genial.gif&#34; data-lightbox=&#34;0&#34; title=&#34;trop génial&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/posts/2016-05-VimMacro/trop_genial.gif&#34; alt=&#34;trop génial&#34;/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_angular2_et_macros_vim&#34;&gt;Angular2 et macros Vim&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Les vidéos de Devoxx 2016 sont sorties, dont &lt;a href=&#34;https://www.youtube.com/watch?v=5U4OasGuo0o&#34;&gt;Angular 2 : Préparez vous dès maintenant à la migration (Benoit Lemoine)&lt;/a&gt;. Une des étapes est de passer par les ControllerAs, je ne vais pas refaire la conf ce n&amp;#8217;est pas le but. Bref, je travaille sur un projet qui définit les controllers comme ceci :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;literalblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;$routeProvider.when(&#39;/admin/displayMail&#39;, {templateUrl: &#39;partials/display_mail.html&#39;, controller: &#39;ListMailCtrl&#39;});
$routeProvider.when(&#39;/admin/createEditMail&#39;, {templateUrl: &#39;partials/create_mail.html&#39;, controller: &#39;EditMailCtrl&#39;});
$routeProvider.when(&#39;/admin/createEditMail/:id&#39;, {templateUrl: &#39;partials/create_mail.html&#39;, controller: &#39;EditMailCtrl&#39;});
$routeProvider.when(&#39;/admin/displayUsers&#39;, {templateUrl: &#39;partials/display_users.html&#39;, controller: &#39;DisplayUsersCtrl&#39;});
$routeProvider.when(&#39;/admin/createUser&#39;, {templateUrl: &#39;partials/create_user.html&#39;, controller: &#39;CreateUserCtrl&#39;});
$routeProvider.when(&#39;/admin/updateUser/:login&#39;, {templateUrl: &#39;partials/update_user.html&#39;, controller: &#39;UpdateUserCtrl&#39;});&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Je veux rajouter pour chaque ligne un &lt;code&gt;controllerAs: &#39;monCtrl&#39;&lt;/code&gt; avec comme nom le même que le controller associé mais en commençant par une minuscule, et donc obtenir les lignes ci-dessous. J&amp;#8217;ai extrait 6 controllers mais en réalité il y en a plutôt une cinquantaine (les noms ont été changés si on me demande).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;literalblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;$routeProvider.when(&#39;/admin/displayMail&#39;, {templateUrl: &#39;partials/display_mail.html&#39;, controller: &#39;ListMailCtrl&#39;, controllerAs: &#39;listMailCtrl&#39;});
$routeProvider.when(&#39;/admin/createEditMail&#39;, {templateUrl: &#39;partials/create_mail.html&#39;, controller: &#39;EditMailCtrl&#39;, controllerAs: &#39;editMailCtrl&#39;});
$routeProvider.when(&#39;/admin/createEditMail/:id&#39;, {templateUrl: &#39;partials/create_mail.html&#39;, controller: &#39;EditMailCtrl&#39;, controllerAs: &#39;editMailCtrl&#39;});
$routeProvider.when(&#39;/admin/displayUsers&#39;, {templateUrl: &#39;partials/display_users.html&#39;, controller: &#39;DisplayUsersCtrl&#39;, controllerAs: &#39;displayUsersCtrl&#39;});
$routeProvider.when(&#39;/admin/createUser&#39;, {templateUrl: &#39;partials/create_user.html&#39;, controller: &#39;CreateUserCtrl&#39;, controllerAs: &#39;createUserCtrl&#39;});
$routeProvider.when(&#39;/admin/updateUser/:login&#39;, {templateUrl: &#39;partials/update_user.html&#39;, controller: &#39;UpdateUserCtrl&#39;, controllerAs: &#39;updateUserCtrl&#39;});&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;qa&lt;/code&gt; : on commence la macro, on enregistre dans a&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;/controller:&amp;lt;enter&amp;gt;&lt;/code&gt; : on recherche controller:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;eeee&lt;/code&gt; : on se déplace de mot en mot pour arriver sur le nom du controller&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;yi&#39;&lt;/code&gt; : on copie tout ce qui se trouve à l&amp;#8217;intérieur des &#39; (le nom du controller donc)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ela&lt;/code&gt; : on se déplace vers la droite et on passe en insertion&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;controllerAs: &#39;&#39;&amp;lt;Esc&amp;gt;&lt;/code&gt; : on écrit le texte et on repasse en mode normal&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;hp&lt;/code&gt; : on passe sur la première &#39; et on copie le texte précédemment copié&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;bgur&lt;/code&gt; : on se place au début du mot et on passe la première lettre en minuscule&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;q&lt;/code&gt; : fin de l&amp;#8217;enregistrement&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;50@a&lt;/code&gt; : on joue la macro 50 fois&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;ce qui donne :
&lt;code&gt;qa/controller:&amp;lt;enter&amp;gt;eeeeyi&amp;#8217;era, controllerAs: &#39;&#39;&amp;lt;Esc&amp;gt;cpbgurq50@a&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Juste en lisant le texte, on a l&amp;#8217;impression que c&amp;#8217;est compliqué, avec les explications j&amp;#8217;espère que ça paraît plus simple, en tout cas ça l&amp;#8217;est avec l&amp;#8217;habitude. Cela paraît long aussi mais au final c&amp;#8217;est rapide à taper, il suffit de voir la vidéo qui est en vitesse réelle :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center;margin:50px;&#34;&gt;
&lt;video style=&#34;width: 100%;&#34; controls src=&#34;https://blog-7460a.firebaseapp.com/videos/vim_macro.webm&#34;&gt;&lt;/video&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Android : Feature Toggle avec Google Tag Manager</title>
      <link>https://blog-7460a.firebaseapp.com/2016/03/30/android_google_tag_manager_feature_toggle</link>
      <pubDate>Wed, 30 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog-7460a.firebaseapp.com/2016/03/30/android_google_tag_manager_feature_toggle</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Le concept de &lt;code&gt;feature toggle&lt;/code&gt; est bien pratique en tant que développeur si l&amp;#8217;on souhaite faire évoluer sa base de code source à un rythme différent de celui des livraisons et des fonctionnalités.
C&amp;#8217;est souvent le cas lorsqu&amp;#8217;il y a autour du produit une équipe marketing / communication qui s&amp;#8217;occupe d&amp;#8217;annoncer telle ou telle nouvelle fonctionnalité.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Le problème avec Android c&amp;#8217;est qu&amp;#8217;il peut être vite problématique d&amp;#8217;utiliser ces features toggle, car une fois l&amp;#8217;application arrivée sur le téléphone des utilisateurs le développeur n&amp;#8217;a plus
la possibilité de changer la valeur des flags autrement qu&amp;#8217;en relivrant l&amp;#8217;application, ce qui peut vite se terminer par du spam d&amp;#8217;updates si les activations/désactivations sont trop fréquentes ou trop rapprochées.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;C&amp;#8217;est là qu&amp;#8217;entre en jeu &lt;code&gt;Google Tag Manager&lt;/code&gt;, cet outil made by Google va nous offrir la possibilité d&amp;#8217;activer/désactiver lesdites fonctionnalités et cela sans avoir à redéployer l&amp;#8217;application sur le store.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_google_tag_manager_la_configuration&#34;&gt;Google Tag Manager : La configuration&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Pour commencer, il faut aller dans l&amp;#8217;interface dédiée de &lt;a href=&#34;https://tagmanager.google.com&#34;&gt;Google Tag Manager&lt;/a&gt; afin de générer la configuration nécessaire pour notre application.
C&amp;#8217;est via cette IHM et avec les informations que l&amp;#8217;on va y ajouter que l&amp;#8217;on pourra revenir plus tard et modifier des valeurs qui seront prises en compte dans l&amp;#8217;application Android.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;La mise en place d&amp;#8217;une configuration pour une application Android passe donc par les étapes suivantes :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Créez un nouveau container (ce qui correspond à créer la configuration pour une application).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Donnez-lui le nom que vous voulez et sélectionnez le type &lt;code&gt;Android&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Une fois le container créé un code unique du type &lt;code&gt;GTM-XXXXXX&lt;/code&gt; lui est attribué par Google notez-le, il sera utilisé dans le code de l&amp;#8217;application Android.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ensuite dans ce container rendez-vous dans la partie &lt;code&gt;Variables&lt;/code&gt; et créez une nouvelle variable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Choisissez le type &lt;code&gt;Value Collection&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Définissez sa valeur avec un objet json { &#39;clé&#39; : &#39;valeur&#39; }, la clé sera elle aussi réutilisée dans le code Android et la valeur peut être ce que vous souhaitez (ici un boolean ira très bien).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;N&amp;#8217;oubliez d&amp;#8217;activer cette variable en sélectionnant Enable : &lt;code&gt;Always&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sauvegardez la variable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Vous pouvez dès à présent publier le container, il est prêt à être utilisé.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avant de quitter cet écran une dernière opération utile, téléchargez la première version publiée du container, il sera nécessaire de l&amp;#8217;embarquer dans le code source en tant que configuration initiale.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Ces étapes sont résumées dans ces écrans :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;div style=&#34;text-align : center&#34;&gt;
&lt;a class=&#34;inlineBoxes&#34; href=&#34;https://blog-7460a.firebaseapp.com/images/posts/2016-03-AndroidGoogleTagManager/GoogleTagManager_containerCreation1.png&#34; data-lightbox=&#34;0&#34; title=&#34;Création du container&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/posts/2016-03-AndroidGoogleTagManager/GoogleTagManager_containerCreation1_min.png&#34; alt=&#34;Création du container&#34;/&gt;
&lt;/a&gt;
&lt;a class=&#34;inlineBoxes&#34; href=&#34;https://blog-7460a.firebaseapp.com/images/posts/2016-03-AndroidGoogleTagManager/GoogleTagManager_containerCreation2.png&#34; data-lightbox=&#34;0&#34; title=&#34;Création du container - Nom et type&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/posts/2016-03-AndroidGoogleTagManager/GoogleTagManager_containerCreation2_min.png&#34; alt=&#34;Création du container - Nom et type&#34;/&gt;
&lt;/a&gt;
&lt;a class=&#34;inlineBoxes&#34; href=&#34;https://blog-7460a.firebaseapp.com/images/posts/2016-03-AndroidGoogleTagManager/GoogleTagManager_gtmIdGenerated.png&#34; data-lightbox=&#34;0&#34; title=&#34;GTM id généré&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/posts/2016-03-AndroidGoogleTagManager/GoogleTagManager_gtmIdGenerated_min.png&#34; alt=&#34;GTM id généré&#34;/&gt;
&lt;/a&gt;
&lt;a class=&#34;inlineBoxes&#34; href=&#34;https://blog-7460a.firebaseapp.com/images/posts/2016-03-AndroidGoogleTagManager/GoogleTagManager_screenVariables.png&#34; data-lightbox=&#34;0&#34; title=&#34;Écran &#39;Variables&#39;&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/posts/2016-03-AndroidGoogleTagManager/GoogleTagManager_screenVariables_min.png&#34; alt=&#34;Écran &#39;Variables&#39;&#34;/&gt;
&lt;/a&gt;
&lt;a class=&#34;inlineBoxes&#34; href=&#34;https://blog-7460a.firebaseapp.com/images/posts/2016-03-AndroidGoogleTagManager/GoogleTagManager_createVariable.png&#34; data-lightbox=&#34;0&#34; title=&#34;Création d&amp;#8217;une nouvelle variable&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/posts/2016-03-AndroidGoogleTagManager/GoogleTagManager_createVariable_min.png&#34; alt=&#34;Création d&amp;#8217;une nouvelle variable&#34;/&gt;
&lt;/a&gt;
&lt;a class=&#34;inlineBoxes&#34; href=&#34;https://blog-7460a.firebaseapp.com/images/posts/2016-03-AndroidGoogleTagManager/GoogleTagManager_publishContainer.png&#34; data-lightbox=&#34;0&#34; title=&#34;Publication du container&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/posts/2016-03-AndroidGoogleTagManager/GoogleTagManager_publishContainer_min.png&#34; alt=&#34;Publication du container&#34;/&gt;
&lt;/a&gt;
&lt;a class=&#34;inlineBoxes&#34; href=&#34;https://blog-7460a.firebaseapp.com/images/posts/2016-03-AndroidGoogleTagManager/GoogleTagManager_downloadContainer.png&#34; data-lightbox=&#34;0&#34; title=&#34;Téléchargement du container&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/posts/2016-03-AndroidGoogleTagManager/GoogleTagManager_downloadContainer_min.png&#34; alt=&#34;Téléchargement du container&#34;/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;/div&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Normalement arrivé là, vous avez configuré un container avec une variable dans celui-ci. Et vous disposez pour ce container de son &lt;em&gt;code unique&lt;/em&gt; ainsi que d&amp;#8217;un &lt;em&gt;binaire&lt;/em&gt; de son contenu.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_application_android_le_code&#34;&gt;Application Android : Le code&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;La seconde partie du travail consiste à modifier son code applicatif afin de lire la variable précédemment ajoutée dans Google Tag Manager.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pour commencer, stockez votre code Google Tag Manager (dans une constante ou un ficher xml, peu importe).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&amp;lt;resources&amp;gt;
    &amp;lt;string name=&#34;tag_manager_id&#34;&amp;gt;GTM-N8NXMK&amp;lt;/string&amp;gt;
&amp;lt;/resources&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ensuite copiez le binaire téléchargé (correspondant à la configuration initiale du container) dans le répertoire &lt;em&gt;/res/raw/&lt;/em&gt;, attention vous devrez surement changer le nom du fichier pour enlever les majuscules.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ajoutez dans votre &lt;em&gt;build.gradle&lt;/em&gt; une nouvelle dépendance vers les play services (seulement la partie analytics nous intéresse).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;dependencies {
    compile &#39;com.google.android.gms:play-services-analytics:8.4.0&#39;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Maintenant dans une Activity (ou bien dans votre Application), vous avez deux choses à faire, récupérer une instance de TagManager et faire une requête pour lire la configuration actuelle du Container.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;public class MainActivity extends AppCompatActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        final TagManager tagManager = TagManager.getInstance(this);
        PendingResult pending = tagManager.loadContainerPreferFresh(getString(R.string.tag_manager_id), R.raw.gtm_initial_conf);
        pending.setResultCallback(new ResultCallback&amp;lt;ContainerHolder&amp;gt;() {
           @Override
           public void onResult(@NonNull ContainerHolder containerHolder) {
               // If unsuccessful, return
               if (!containerHolder.getStatus().isSuccess()) {
                   // Deal with failure
                   return;
               }
               containerHolder.refresh();

               final boolean feature1Status = containerHolder.getContainer().getBoolean(&#34;feature1&#34;);
               Log.d(&#34;TagManager&#34;, String.valueOf(feature1Status));
           }
        }, 2, TimeUnit.SECONDS);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Et c&amp;#8217;est tout ! Vous pouvez retourner dans l&amp;#8217;interface de Tag Manager, pour modifier la valeur de la variable feature1, publiez la nouvelle version du container et si vous redémarrez l&amp;#8217;application,
 la nouvelle valeur devrait apparaitre.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Rapide et efficace, non ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_chargement_des_données_du_container&#34;&gt;Chargement des données du container&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Via l&amp;#8217;instance de TagManager différentes méthodes sont disponibles pour charger le container et les valeurs qu&amp;#8217;il contient.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;tagManager.loadContainerDefaultOnly(...); &lt;b class=&#34;conum&#34;&gt;(1)&lt;/b&gt;
tagManager.loadContainerPreferFresh(...); &lt;b class=&#34;conum&#34;&gt;(2)&lt;/b&gt;
tagManager.loadContainerPreferNonDefault(...); &lt;b class=&#34;conum&#34;&gt;(2)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;colist arabic&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;va uniquement regarder les valeurs dans le binaire ajouté dans /res/raw&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;vont essayer de prendre les dernières valeurs publiées (ou non) mais sans être garantie à 100% (notamment s&amp;#8217;il ya des problèmes de réseaux)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Les différences sont détaillées &lt;a href=&#34;https://developers.google.com/android/reference/com/google/android/gms/tagmanager/TagManager#public-methods&#34;&gt;dans la doc&lt;/a&gt;.
Mais selon toute logique cette qui va nous intéresser sera uniquement &lt;code&gt;loadContainerPreferFresh()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Les pour et les contre d&amp;#8217;utiliser Tag Manager pour faire du feature toggle vont forcément dépendre du besoin du développeur.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_pour&#34;&gt;Pour&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Le principale avantage et la mise en place sans le développement d&amp;#8217;une API rien que pour ça (si votre application n&amp;#8217;a pas de backend dédié, pas besoin d&amp;#8217;en créer un).&lt;br&gt;
Toute la logique de configuration initiale versus configuration mise à jour est déjà implémentée et tout se gère via l&amp;#8217;appel &lt;code&gt;tagManager.loadContainer()&lt;/code&gt;.&lt;br&gt;
Ça fonctionne tout aussi bien sur iOS.&lt;br&gt;
Un autre point très intéressant (et non abordé ici) est la publication d&amp;#8217;une variable selon des critères (on va pouvoir modifier un toggle, pour par exemple faire du A/B testing en fonction d&amp;#8217;un tas de critères comme la taille de l&amp;#8217;écran ou bien la langue de l&amp;#8217;utilisateur ou même la version de l&amp;#8217;application).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_contre&#34;&gt;Contre&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Si le &lt;code&gt;loadPreferFresh&lt;/code&gt; échoue (problème réseau par exemple) on retombe sur la config par défaut, mais est-ce que ça fonctionnerait mieux avec une solution custom ? par sûr.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_liens&#34;&gt;Liens&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Code sources d&amp;#8217;exemple : &lt;a href=&#34;https://github.com/fchauveau/blog-android-tag-manager&#34; class=&#34;bare&#34;&gt;https://github.com/fchauveau/blog-android-tag-manager&lt;/a&gt;&lt;br&gt;
Documentation Google officielle : &lt;a href=&#34;https://developers.google.com/tag-manager/android/v4/&#34; class=&#34;bare&#34;&gt;https://developers.google.com/tag-manager/android/v4/&lt;/a&gt;&lt;br&gt;
Cours Udacity d&amp;#8217;explication : &lt;a href=&#34;https://www.udacity.com/course/viewer#!/c-ud876-2/l-4027658558/m-4328729937&#34; class=&#34;bare&#34;&gt;https://www.udacity.com/course/viewer#!/c-ud876-2/l-4027658558/m-4328729937&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Jenkins Workflow Plugin</title>
      <link>https://blog-7460a.firebaseapp.com/2016/01/20/jenkinsworkflow</link>
      <pubDate>Wed, 20 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog-7460a.firebaseapp.com/2016/01/20/jenkinsworkflow</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Un des points génants lors de l&amp;#8217;utilisation de Jenkins est le coté volatile de la configuration des jobs de builds.
Il est souvent nécessaire de jouer de click-click pour faire la configuration des jobs sur Jenkins et de se reposer sur un plugin permettant de versionner,
autant que possible, les configurations utilisées.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Mais, une fois que vous aurez lu cet article, vous vous rendrez compte que c&amp;#8217;est le passé.
Attention toutefois, cet article parle de Jenkins, de Docker et de Groovy, n&amp;#8217;ayez pas peur, tout est &lt;em&gt;presque&lt;/em&gt; trop simple&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_prérequis_jenkins&#34;&gt;Prérequis Jenkins&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_jenkins_avec_accès_à_docker&#34;&gt;Jenkins avec accès à Docker&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Nous avons l&amp;#8217;habitude d&amp;#8217;utiliser un Jenkins lancé dans un container depuis quelques temps.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Nous utilisons l&amp;#8217;image maintenue par &lt;a href=&#34;https://agileek.github.io/&#34;&gt;Michael Bitard&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/agileek/docker-jenkins/&#34;&gt;&lt;code&gt;agileek/docker-jenkins&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Nous lançons cette image en lui fournissant de quoi exécuter le binaire docker client sans soucis :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run
       -d --restart=&#34;always&#34; --name jenkins
       -u $(id -u):$(getent group docker | cut -d: -f3) &lt;b class=&#34;conum&#34;&gt;(1)&lt;/b&gt;
       -p 8080:8080
       -v /var/jenkins_home:/var/jenkins_home &lt;b class=&#34;conum&#34;&gt;(2)&lt;/b&gt;
       -v $(which docker):/usr/bin/docker &lt;b class=&#34;conum&#34;&gt;(3)&lt;/b&gt;
       -v /var/run/docker.sock:/var/run/docker.sock &lt;b class=&#34;conum&#34;&gt;(4)&lt;/b&gt;
       -v /usr/lib/x86_64-linux-gnu/libapparmor.so.1:/lib/x86_64-linux-gnu/libapparmor.so.1 &lt;b class=&#34;conum&#34;&gt;(5)&lt;/b&gt;
       agileek/docker-jenkins &lt;b class=&#34;conum&#34;&gt;(6)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;colist arabic&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Le container est lancé avec l&amp;#8217;utilisateur courant et le groupe &lt;code&gt;docker&lt;/code&gt; pour pouvoir accéder au &lt;code&gt;docker.sock&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pour éviter les incohérences de chemin, le chemin racine du jenkins est le même en dehors et dans le container&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Le binaire docker du système est fourni dans l&amp;#8217;image&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Le socket docker est également fourni pour que le client puisse &#34;parler&#34; au démon&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;La bibliotheque apparmor est nécessaire pour le bon fonctionnement de docker client&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_jenkins_workflow_plugin&#34;&gt;Jenkins workflow plugin&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Pour utiliser la suite des éléments, vous aurez besoin des plugins gérant la notion de &lt;em&gt;workflow&lt;/em&gt; dans Jenkins :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Unresolved directive in &amp;lt;stdin&amp;gt; - include::app/_includes/lightbox.adoc[]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Ensuite, il nous est possible de créer un job de construction de type &lt;em&gt;workflow&lt;/em&gt; :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Unresolved directive in &amp;lt;stdin&amp;gt; - include::app/_includes/lightbox.adoc[]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_premier_job_em_workflow_em&#34;&gt;Premier job &lt;em&gt;Workflow&lt;/em&gt;&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Ensuite, c&amp;#8217;est là que la magie opère, plutôt que de devoir sélectionner les n-items voulus et remplir chaque étape du build, nous pouvons maintenant le décrire en utilisant du code !
Ainsi, en copiant/collant le script suivant dans la partie idoine, vous devriez avoir un job bien configuré qui marche, du premier coup !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;def m2Repo = &#39;-v /var/jenkins_home/.m2:/home/jenkins/.m2&#39; //  &lt;b class=&#34;conum&#34;&gt;(1)&lt;/b&gt;
def timezone = &#39;-e TZ=Europe/Paris&#39; // &lt;b class=&#34;conum&#34;&gt;(2)&lt;/b&gt;
docker.image(&#34;codetroopers/jenkins-slave-jdk8-restx&#34;)
    .inside(&#34;${m2Repo} ${timezone}&#34;){ //  &lt;b class=&#34;conum&#34;&gt;(3)&lt;/b&gt;
    git branch: &#39;master&#39;, url: &#39;https://github.com/code-troopers/jenkins-workflow-demo-repo.git&#39; // &lt;b class=&#34;conum&#34;&gt;(4)&lt;/b&gt;
    sh &#34;MAVEN_OPTS=-Dfile.encoding=UTF-8 mvn clean install -B -Ppackage&#34; // &lt;b class=&#34;conum&#34;&gt;(5)&lt;/b&gt;
    step([$class: &#39;ArtifactArchiver&#39;, artifacts: &#39;srv/target/dependency/webapp-runner.jar, srv/target/*.war, run.sh&#39;]) // &lt;b class=&#34;conum&#34;&gt;(6)&lt;/b&gt;
    step([$class: &#39;JUnitResultArchiver&#39;, testResults: &#39;**/target/surefire-reports/TEST-*.xml&#39;]) // &lt;b class=&#34;conum&#34;&gt;(7)&lt;/b&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;colist arabic&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Partage du dépôt Maven local (pour gagner en temps de build)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Export de la timezone (pour les tests unitaires de l&amp;#8217;exemple)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Démarrage du conteneur de build avec la bonne timezone ainsi que le dépôt partagé&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clonage des sources&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lancement du build (en forçant l&amp;#8217;UTF-8)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Archivage des produits du build&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Archivage des résultats des tests&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Comme vous pouvez le voir, le script est relativement parlant et permet en plus de s&amp;#8217;affranchir du clickodrome de configuration dans l&amp;#8217;interface de Jenkins !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Il est intéressant de noter que l&amp;#8217;image Docker qui sert au build est une image personnalisée. Ce n&amp;#8217;est pas parce qu&amp;#8217;elle inclut un quelconque fonctionnement permettant de builder
en utilisant le plugin Workflow. Elle sert de base uniquement car elle met à disposition la partie &lt;code&gt;npm&lt;/code&gt; nécessaire au build de la partie &lt;em&gt;frontend&lt;/em&gt; de l&amp;#8217;application RestX.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_grouper_les_étapes&#34;&gt;Grouper les étapes&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Le plugin workflow permet en plus de grouper les différentes étapes d&amp;#8217;un build pour permettre, par exemple, de le lancer sur plusieurs environnement différents.
Ici nous ajoutons simplement un nom de groupe pour notre étape de build.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;stage &#39;build&#39; // &lt;b class=&#34;conum&#34;&gt;(1)&lt;/b&gt;
    def m2Repo = &#39;-v /var/jenkins_home/.m2:/home/jenkins/.m2&#39;
    def timezone = &#39;-e TZ=Europe/Paris&#39;
    docker.image(&#34;codetroopers/jenkins-slave-jdk8-restx&#34;).inside(&#34;${m2Repo} ${timezone}&#34;){
        git branch: &#39;master&#39;, url: &#39;https://github.com/code-troopers/jenkins-workflow-demo-repo.git&#39;
        sh &#34;MAVEN_OPTS=-Dfile.encoding=UTF-8 mvn clean install -B -Ppackage&#34;
        step([$class: &#39;ArtifactArchiver&#39;, artifacts: &#39;srv/target/dependency/webapp-runner.jar, srv/target/*.war, run.sh&#39;])
        step([$class: &#39;JUnitResultArchiver&#39;, testResults: &#39;**/target/surefire-reports/TEST-*.xml&#39;])
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;colist arabic&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Étape nommée pour l&amp;#8217;exécution de la construction de l&amp;#8217;application&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_mettre_de_côté_les_fichiers_pour_plus_tard&#34;&gt;Mettre de côté les fichiers pour plus tard&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;La notion de &lt;em&gt;stash&lt;/em&gt; bien connue des utilisateurs de git est également présente.
Elle permet de mettre de côté des fichiers pour les réutiliser à une étape ultérieure du &lt;em&gt;workflow&lt;/em&gt; de build.
Ceci permet d&amp;#8217;éviter l&amp;#8217;archivage de produits du build pour des raisons &#34;techniques&#34;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;stage &#39;build&#39;
    def m2Repo = &#39;-v /var/jenkins_home/.m2:/home/jenkins/.m2&#39;
    def timezone = &#39;-e TZ=Europe/Paris&#39;
    docker.image(&#34;codetroopers/jenkins-slave-jdk8-restx&#34;).inside(&#34;${m2Repo} ${timezone}&#34;){
        git branch: &#39;master&#39;, url: &#39;https://github.com/code-troopers/jenkins-workflow-demo-repo.git&#39;
        sh &#34;MAVEN_OPTS=-Dfile.encoding=UTF-8 mvn clean install -B -Ppackage&#34;
        step([$class: &#39;ArtifactArchiver&#39;, artifacts: &#39;srv/target/dependency/webapp-runner.jar, srv/target/*.war, run.sh&#39;])
        step([$class: &#39;JUnitResultArchiver&#39;, testResults: &#39;**/target/surefire-reports/TEST-*.xml&#39;])
        stash includes: &#39;run.sh,srv/target/dependency/webapp-runner.jar,srv/target/*.war,Dockerfile&#39;, name: &#39;dockerBuild&#39; // &lt;b class=&#34;conum&#34;&gt;(1)&lt;/b&gt;
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;colist arabic&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Enregistrement d&amp;#8217;une liste de fichiers associée à un nom pour une utilisation ultérieure&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_Étape_de_construction_d_une_image_docker&#34;&gt;Étape de construction d&amp;#8217;une image Docker&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;stage &#39;docker&#39; // &lt;b class=&#34;conum&#34;&gt;(1)&lt;/b&gt;
node{ // &lt;b class=&#34;conum&#34;&gt;(2)&lt;/b&gt;
  ws{ // &lt;b class=&#34;conum&#34;&gt;(3)&lt;/b&gt;
    unstash &#39;dockerBuild&#39; // &lt;b class=&#34;conum&#34;&gt;(4)&lt;/b&gt;
    docker.build(&#34;codetroopers/jenkins-workflow-demo:${env.BUILD_ID}&#34;) // &lt;b class=&#34;conum&#34;&gt;(5)&lt;/b&gt;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;colist arabic&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Création d&amp;#8217;une nouvelle étape&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Permet de distinguer un ensemble d&amp;#8217;opération de build (peut accepter les labels pour restreindre sur des noeuds)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Déclenche la création d&amp;#8217;un nouveau &lt;em&gt;workspace&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Récupère les fichiers mis de côté sous le nom &lt;code&gt;dockerBuild&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Construction d&amp;#8217;une image docker avec pour tag le numéro de build en cours (&lt;code&gt;$BUILD_ID&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_workflow_et_gestion_multibranche&#34;&gt;Workflow et gestion multibranche&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Dans nos façons de fonctionner qui sont maintenant devenues habituelles, nous utilisons de façon intensives les branches pour isoler nos développements.
Un des points fastidieux est de configurer un nouveau job Jenkins pour chaque branche afin de valider son bon fonctionnement et ne pas se rendre compte trop tard d&amp;#8217;un build au rouge.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Le plugin &#39;Workflow Multibranch&#39; simplifie de façon drastique ce genre de cas, il suffit de rajouter un descripteur de build dans les sources.
Le fichier correspondant est tout simplement appelé &lt;code&gt;Jenkinsfile&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;stage &#39;build&#39;
    def m2Repo = &#39;-v /var/jenkins_home/.m2:/home/jenkins/.m2&#39;
    def timezone = &#39;-e TZ=Europe/Paris&#39;
    docker.image(&#34;codetroopers/jenkins-slave-jdk8-restx&#34;).inside(&#34;${m2Repo} ${timezone}&#34;){
        checkout scm // &lt;b class=&#34;conum&#34;&gt;(1)&lt;/b&gt;
        sh &#34;MAVEN_OPTS=-Dfile.encoding=UTF-8 mvn clean install -B -Ppackage&#34;
        step([$class: &#39;ArtifactArchiver&#39;, artifacts: &#39;srv/target/dependency/webapp-runner.jar, srv/target/*.war, run.sh&#39;])
        step([$class: &#39;JUnitResultArchiver&#39;, testResults: &#39;**/target/surefire-reports/TEST-*.xml&#39;])
        stash includes: &#39;run.sh,srv/target/dependency/webapp-runner.jar,srv/target/*.war,Dockerfile&#39;, name: &#39;dockerBuild&#39;
    }

stage &#39;docker&#39;
node{
  ws{
    unstash &#39;dockerBuild&#39;
    docker.build(&#34;codetroopers/jenkins-workflow-demo:${env.BUILD_ID}&#34;)
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;colist arabic&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Il faut bien entendu remplacer l&amp;#8217;endroit où nous faisions le git clone pour qu&amp;#8217;il soit dynamique par rapport à ce qu&amp;#8217;on
construit. Le terme &lt;code&gt;checkout scm&lt;/code&gt; permet de s&amp;#8217;assurer de ce fonctionnement.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;L&amp;#8217;intérêt est que chaque branche qui sera buildée n&amp;#8217;aura pas son historique mélangé avec une autre (là où les jobs de validation de Pull Request ont tendance à tout mélanger).
De plus, un changement dans le process de build sera directement versionné.
Il n&amp;#8217;y aura donc pas besoin de penser à éditer le job lors du merge sur &lt;code&gt;master&lt;/code&gt; (on a tous vécu ce genre de situation énervante) !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_attendre_une_confirmation_utilisateur&#34;&gt;Attendre une confirmation utilisateur&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Un des points intéressant de ce plugin est qu&amp;#8217;il permet la mise en pause des constructions.
Ainsi, il est possible de mettre en pause une construction correspondant à une livraison et de lui faire attendre une validation manuelle par exemple.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;stage &#39;build&#39;
    def m2Repo = &#39;-v /var/jenkins_home/.m2:/home/jenkins/.m2&#39;
    def timezone = &#39;-e TZ=Europe/Paris&#39;
    docker.image(&#34;codetroopers/jenkins-slave-jdk8-restx&#34;).inside(&#34;${m2Repo} ${timezone}&#34;){
        git branch: &#39;master&#39;, url: &#39;https://github.com/code-troopers/jenkins-workflow-demo-repo.git&#39;
        sh &#34;MAVEN_OPTS=-Dfile.encoding=UTF-8 mvn clean install -B -Ppackage&#34;
        step([$class: &#39;ArtifactArchiver&#39;, artifacts: &#39;srv/target/dependency/webapp-runner.jar, srv/target/*.war, run.sh&#39;])
        step([$class: &#39;JUnitResultArchiver&#39;, testResults: &#39;**/target/surefire-reports/TEST-*.xml&#39;])
        stash includes: &#39;run.sh,srv/target/dependency/webapp-runner.jar,srv/target/*.war,Dockerfile&#39;, name: &#39;dockerBuild&#39;
    }

stage &#39;docker&#39;
node{
    ws{
        unstash &#39;dockerBuild&#39;
        def built = docker.build(&#34;codetroopers/jenkins-workflow-demo:${env.BUILD_ID}&#34;)
        input &#39;Is everything ok ? Run app ?&#39; // &lt;b class=&#34;conum&#34;&gt;(1)&lt;/b&gt;
        echo &#34;We can run the docker-compose up here&#34;
        def outcome = input message: &#39;We can even have parameters to answer this question&#39;, parameters: [ // &lt;b class=&#34;conum&#34;&gt;(2)&lt;/b&gt;
            [name: &#39;myChoice&#39;, description: &#39;My choice&#39;, choices: &#39;Choice 1\nChoice 2\nChoice 3&#39;, $class: &#39;ChoiceParameterDefinition&#39;]
        ]
        echo &#34;You have chosen ${outcome}&#34; // &lt;b class=&#34;conum&#34;&gt;(3)&lt;/b&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;colist arabic&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;input&lt;/code&gt; met en pause la construction et permet de continuer ou interrompre celle-ci&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Il est également possible de permettre à l&amp;#8217;utilisateur de faire un choix&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ici la valeur sélectionnée par l&amp;#8217;utilisateur est écrite dans la sortie du build.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;J&amp;#8217;espère que cet article vous donnera l&amp;#8217;envie d&amp;#8217;essayer de rationnaliser un peu plus la configuration de vos job Jenkins en les stockant dans votre SCM&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Startup Weekend : côté perdant</title>
      <link>https://blog-7460a.firebaseapp.com/2016/01/14/startupweekend-coteperdant</link>
      <pubDate>Thu, 14 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog-7460a.firebaseapp.com/2016/01/14/startupweekend-coteperdant</guid>
      <description>

&lt;h2 id=&#34;ou-yo-angularjs-le-meilleur-ami-des-mvp:945cc23a289babed8a7c481e978022e4&#34;&gt;Ou : Yo ! AngularJS, le meilleur ami des MVP&lt;/h2&gt;

&lt;p&gt;Le week-end du 5 décembre a eu lieu un Startup Weekend édition tourisme à Tours où 6 troopers étaient présents. 3 d&amp;rsquo;entres nous ont choisi l&amp;rsquo;équipe &lt;code&gt;We Guide&lt;/code&gt; composée de 3 développeurs, 3 designers et 3 profils business (les 3 autres ont choisi &lt;a href=&#34;https://twitter.com/shakemytours&#34;&gt;@shakemytours&lt;/a&gt; et ont gagné le Startup Weekend).
L&amp;rsquo;idée de base est de découvrir une région à l&amp;rsquo;aide d&amp;rsquo;un guide local, officiel ou non. Quelqu&amp;rsquo;un qui emmène les touristes aussi bien dans les bars, restaurants, parcs que dans les monuments plus habituels de touraine comme les châteaux, la &lt;a href=&#34;http://basiliquesaintmartin.fr/&#34;&gt;basilique Saint-Martin&lt;/a&gt; ou le &lt;a href=&#34;http://www.decouvrez-levaldeloire.com/#grand-aquarium-actualites&#34;&gt;Grand Aquarium de Touraine&lt;/a&gt;. Un peu à l&amp;rsquo;image des &lt;a href=&#34;http://www.tours-greeters.fr/&#34;&gt;greeters&lt;/a&gt; mais rémunérés pour motiver plus de guides et permettre de promouvoir cette pratique.&lt;/p&gt;

&lt;div class=&#34;text-center&#34;&gt;
    &lt;a href=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/e/eb/Tours,_Saint_Martin.JPG/280px-Tours,_Saint_Martin.JPG&#34; data-lightbox=&#34;group-1&#34; title=&#34;saint martin de tours&#34; class=&#34;inlineBoxes&#34;&gt;
        &lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/e/eb/Tours,_Saint_Martin.JPG/280px-Tours,_Saint_Martin.JPG&#34;/&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;h2 id=&#34;init-l-attaque-des-clones:945cc23a289babed8a7c481e978022e4&#34;&gt;Init : L&amp;rsquo;attaque des clones&lt;/h2&gt;

&lt;p&gt;Fort de nos précédentes expériences de Startup Weekend, nous avions tout prévu. En hard, batteries pleines et câbles. En soft, des images docker diverses de jdk8 à postgresql en passant par jenkins (oui c&amp;rsquo;était large et optimiste) mais aussi IntelliJ et Android Studio à jour, ainsi que diverses images de genymotion.
Nous étions parés à toute éventualité, ou presque. Pour développer le MVP de We Guide, nous avons décidé de faire un site web.
Faire un site complet en 54h, qui soit à peu près beau, c&amp;rsquo;est un peu mission impossible. On partait de absolument 0 à part une esquisse d&amp;rsquo;idée de base, donc le vendredi soir on l&amp;rsquo;a surtout passé à discuter de l&amp;rsquo;idée.&lt;/p&gt;

&lt;p&gt;Nous avons donc choisi de nous concentrer uniquement sur un front AngularJS en mockant les appels du back. Bon, dans la liste des choses préparées à l&amp;rsquo;avance on n&amp;rsquo;avait pas pensé à faire un &amp;ldquo;yo angular&amp;rdquo;.
&lt;a href=&#34;http://yeoman.io/&#34;&gt;Yeoman&lt;/a&gt; est un générateur de projet, ça permet d&amp;rsquo;initialiser un nouveau projet avec un certains nombre de bibliothèques, les connexions aux bases de données nécéssaires, la gestion des utilisateurs etc. Dans notre cas nous avions surtout besoin de npm/bower/gulp.
Le téléchargement est un peu long, le répertoire &lt;code&gt;node_modules&lt;/code&gt; fait 380Mo, alors oui en fibre chez soit c&amp;rsquo;est rapide, mais quand on est des dizaines à tirer sur un réseau pas forcément dessiné pour, c&amp;rsquo;est un peu lent. En plus on a eu un bug dans gulp que l&amp;rsquo;on a remplacé par grunt faute de temps pour débugger, donc re-téléchargement.
Au final, on a pu commencer à tous faire nos git clone vers 10h le samedi matin.&lt;/p&gt;

&lt;p&gt;Ensuite nous commençons à intégrer ce que l&amp;rsquo;on aura besoin. Du beau et des petits effets, donc &lt;a href=&#34;https://material.angularjs.org/latest/&#34;&gt;Angular Material&lt;/a&gt;. On prépare nos composants, autocomplete, sliders, buttons… et les routes, page principale, page de création/édition de compte, recherche de guides. Les informations sur les couleurs, les pictos, logo et maquettes arrivent au fil de l&amp;rsquo;eau. C&amp;rsquo;est toujours un peu spécial de commencer à travailler et d&amp;rsquo;avoir toutes les informations &lt;em&gt;après&lt;/em&gt; mais on commence à être des habitués des Startup Weekend (et de certains clients ;) )&lt;/p&gt;

&lt;h2 id=&#34;commit-le-réveil-de-la-force:945cc23a289babed8a7c481e978022e4&#34;&gt;Commit : Le réveil de la force&lt;/h2&gt;

&lt;p&gt;Le samedi soir, on est dans la vibe. Plus trop besoin de réseau, on a des visuels et nos bibliothèques de base. Pas besoin de s&amp;rsquo;occuper des ravitaillements, on se concentre juste sur le code et c&amp;rsquo;est ça qu&amp;rsquo;on aime.
Nous avons donc une navbar avec notre logo et les différentes actions de navigation fonctionnelles.
&lt;div style=&#34;text-align:center;margin-bottom:50px&#34;&gt;
    &lt;a href=&#34;https://blog-7460a.firebaseapp.com/images/postWeGuide/navbar1.png&#34; data-lightbox=&#34;group-2&#34; title=&#34;navbar weguide&#34; class=&#34;inlineBoxes&#34;&gt;
&lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/postWeGuide/navbar1.png&#34; alt=&#34;navbar&#34;/&gt;&lt;br/&gt;
    &lt;/a&gt;
&lt;br/&gt;
    &lt;a href=&#34;https://blog-7460a.firebaseapp.com/images/postWeGuide/navbar2.png&#34; data-lightbox=&#34;group-2&#34; title=&#34;navbar connected weguide&#34; class=&#34;inlineBoxes&#34;&gt;
&lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/postWeGuide/navbar2.png&#34; alt=&#34;navbar connecté&#34;/&gt;
    &lt;/a&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Un logo, une phrase d&amp;rsquo;accroche sur un fond de page avec transition d&amp;rsquo;images en background animé par css (ici en accéléré dans le gif).
&lt;div style=&#34;text-align:center;margin-bottom:50px&#34;&gt;
    &lt;a href=&#34;https://blog-7460a.firebaseapp.com/images/postWeGuide/logo.gif&#34; data-lightbox=&#34;group-3&#34; title=&#34;Logo weguide&#34; class=&#34;inlineBoxes&#34;&gt;
&lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/postWeGuide/logo.gif&#34; alt=&#34;logo&#34;/&gt;
    &lt;/a&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Un footer avec nos liens twitter et facebook, et le premier formulaire de recherche.
On recherche donc une ville, un autocomplete angular material, avec des dates de début et de fin de projet. Si vous connaissez AngularJS, vous savez peut-être qu&amp;rsquo;il n&amp;rsquo;y avait pas de date picker jusqu&amp;rsquo;à peu. Maintenant il y en a mais en RC et c&amp;rsquo;est encore un peu buggué, il a fallu corriger certaines choses liées au style.
Ah oui, sur le bouton de recherche, en plus du ripple effect il y a un petit effet kiss cool tout en css et évidemment, la ville est mandatory (tout est dans le détail).
&lt;div style=&#34;text-align: center;margin:50px;&#34;&gt;
&lt;video style=&#34;width: 90%; max-width: 600px;&#34; controls src=&#34;https://blog-7460a.firebaseapp.com/images/postWeGuide/search.webm&#34;&gt;&lt;/video&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;On arrive alors sur la page de résultats. Sur cette page au design épuré, nous avons la barre de recherche avec la ville et les dates saisies précédemment.
&lt;div style=&#34;text-align:center;margin-bottom:50px&#34;&gt;
    &lt;a href=&#34;https://blog-7460a.firebaseapp.com/images/postWeGuide/searchbar.png&#34; data-lightbox=&#34;group-4&#34; title=&#34;Searchbar weguide&#34; class=&#34;inlineBoxes&#34;&gt;
&lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/postWeGuide/searchbar.png&#34; alt=&#34;searchbar&#34;/&gt;
    &lt;/a&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;S&amp;rsquo;en suit des paramètres par défaut. Des checkbox pour les activités, des doubles sliders pour sélectionner la distance et le prix souhaité.
&lt;div style=&#34;text-align:center;margin-bottom:50px&#34;&gt;
    &lt;a href=&#34;https://blog-7460a.firebaseapp.com/images/postWeGuide/params.gif&#34; data-lightbox=&#34;group-5&#34; title=&#34;search parameters weguide&#34; class=&#34;inlineBoxes&#34;&gt;
&lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/postWeGuide/params.gif&#34; alt=&#34;params&#34;/&gt;
    &lt;/a&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Au centre, une description du guide, &amp;ldquo;effet zoom pour plus d&amp;rsquo;infos&amp;rdquo; et la possibilité de lui envoyer un message.
&lt;div style=&#34;text-align: center;margin:50px;&#34;&gt;
&lt;video style=&#34;width: 90%; max-width: 600px;&#34; controls src=&#34;https://blog-7460a.firebaseapp.com/images/postWeGuide/guide.webm&#34;&gt;&lt;/video&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Enfin, une autre page fonctionnelle a été réalisée pour s&amp;rsquo;inscrire en tant que guide.
Tout est enregistré dans le local storage avec AngularJS, ça permet d&amp;rsquo;aller vite, de pouvoir jouer avec l&amp;rsquo;appli mais de ne pas avoir besoin d&amp;rsquo;une base de donnée.
&lt;div style=&#34;text-align: center;margin:50px;&#34;&gt;
&lt;video style=&#34;width: 90%; max-width: 600px;&#34; controls src=&#34;https://blog-7460a.firebaseapp.com/images/postWeGuide/register.webm&#34;&gt;&lt;/video&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Pour en voir plus, vous pouvez aller sur &lt;a href=&#34;https://weguide.herokuapp.com&#34;&gt;https://weguide.herokuapp.com&lt;/a&gt;  et le code est disponible sur &lt;a href=&#34;https://github.com/code-troopers/sw-weguide/&#34;&gt;https://github.com/code-troopers/sw-weguide/&lt;/a&gt; mais ne vous attardez pas trop sur les commits logs :p&lt;/p&gt;

&lt;h2 id=&#34;push-un-nouvel-espoir:945cc23a289babed8a7c481e978022e4&#34;&gt;Push : Un nouvel espoir&lt;/h2&gt;

&lt;p&gt;Pour finir même si nous n&amp;rsquo;avons pas gagné de prix, on a gagné des amis, on s&amp;rsquo;est amusé, on a codé tout le week-end sans s&amp;rsquo;occuper de logistique et c&amp;rsquo;était bien sympa.
Encore une fois merci aux organisateurs d&amp;rsquo;avoir tout prévu et d&amp;rsquo;avoir pris soin de notre santé physique et mentale.&lt;/p&gt;

&lt;p&gt;Nos collègues étaient principalement des étudiants qui n&amp;rsquo;avaient jamais travaillés avec des développeurs. Inconsciemment nous avons utilisé quelques principes de base des méthodes agiles, entre autre en faisant un point toutes les &lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt; heures, équivalent à un daily. Et nous avons essayé de faire passer l&amp;rsquo;idée des post-its pour les bugfix et les nouvelles tâches. Mais nous aurions pu mieux faire, en partie parce-que l&amp;rsquo;on travaille totalement différement en Startup Weekend comparé à la vraie vie, donc on aurait pu mettre l&amp;rsquo;accent sur d&amp;rsquo;autres points afin de les former à être de bons clients, ça pourrait être utile pour plus tard :)&lt;/p&gt;

&lt;p&gt;Cet article avait deux buts, déjà soulager ma conscience car sans doute personne n&amp;rsquo;a vu notre travail même si cette année un prix a été remis pour le MVP le plus abouti, c&amp;rsquo;est déjà plus valorisant pour les développeurs.
Ensuite pour le rappeler, AngularJS c&amp;rsquo;est juste trop bien, ce n&amp;rsquo;est pas un mockup, cela marche vraiment en un rien de temps. J&amp;rsquo;espère vous avoir convaincu si vous en doutiez encore.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Navig&#39;Tours : côté serveur</title>
      <link>https://blog-7460a.firebaseapp.com/2016/01/04/navigtours-cote_serveur</link>
      <pubDate>Mon, 04 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog-7460a.firebaseapp.com/2016/01/04/navigtours-cote_serveur</guid>
      <description>

&lt;p&gt;Cet article, une fois n&amp;rsquo;est pas coutume, va rentrer un peu plus dans le fonctionnement de la partie serveur mise en place pour &lt;a href=&#34;http://navigtours.com/&#34;&gt;Navig&amp;rsquo;Tours&lt;/a&gt;.
Si vous n&amp;rsquo;êtes pas technique, il risque d&amp;rsquo;être compliqué de le suivre !&lt;/p&gt;

&lt;!-- break --&gt;

&lt;h2 id=&#34;architecture:dad4c2b1f4f43c57ed0806fbc2bfdf56&#34;&gt;Architecture&lt;/h2&gt;

&lt;p&gt;La partie serveur de Navig&amp;rsquo;Tours est en réalité assez simple. Comme dit lors de différentes présentations des membres de Code-Troopers, ce projet est pour nous un moyen de nous amuser lorsque nous nous retrouvons tous les septs.
C&amp;rsquo;est également le projet que nous utilisons pour tester certaines technologies et approches.&lt;/p&gt;

&lt;p&gt;Ainsi, Navig&amp;rsquo;Tours est une application développée en utilisant Java 8, mais rien de forcément très étonnant maintenant. Le côté le plus intéressant est qu&amp;rsquo;elle est en production depuis plus d&amp;rsquo;un an maintenant avec Java 8 !&lt;/p&gt;

&lt;p&gt;Ensuite, nous utilisons l&amp;rsquo;excellent framework RestX pour simplifier notre vie dans la gestion des appels REST, ce qu&amp;rsquo;il nous apporte, entre autres :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;de l&amp;rsquo;injection de dépendances lors de la compilation&lt;/li&gt;
&lt;li&gt;un outillage d&amp;rsquo;administration complet&lt;/li&gt;
&lt;li&gt;une plateforme de test intégrée et de specs nous permettant de documenter facilement l&amp;rsquo;API&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enfin, pour la partie stockage des données, nous utilisons MongoDB qui nous simplifie la gestion de données en manipulant des données principalement au format JSON (et fournit une bonne gestion de la géolocalisation par coordonnées).&lt;/p&gt;

&lt;h2 id=&#34;du-dev:dad4c2b1f4f43c57ed0806fbc2bfdf56&#34;&gt;Du dev&amp;hellip;&lt;/h2&gt;

&lt;p&gt;Côté dev, nous utilisons notre petit wrapper (&lt;a href=&#34;http://code-troopers.com/2014/12/15/CT_Project_Alias.html&#34;&gt;ct&lt;/a&gt;) pour les tâches classiques qui se charge d&amp;rsquo;effectuer le build ainsi que le run de l&amp;rsquo;application avec ses dépendances.
Le lancement de l&amp;rsquo;application se limite à mettre à disposition un serveur MongoDB ainsi qu&amp;rsquo;à effectuer un &lt;code&gt;java -jar&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;à-la-prod:dad4c2b1f4f43c57ed0806fbc2bfdf56&#34;&gt;À la prod !&lt;/h2&gt;

&lt;p&gt;Historiquement, l&amp;rsquo;application a été déployée sur Heroku dans son plan gratuit en utilisant plusieurs services cibles (pour répartir la charge via l&amp;rsquo;utilisation de plusieurs entrées DNS).&lt;/p&gt;

&lt;p&gt;Mais, suite au changement de tarification d&amp;rsquo;Heroku et notre envie d&amp;rsquo;utiliser Docker sur un vrai projet, nous avons migré l&amp;rsquo;environnement pour utiliser exclusivement Docker.&lt;/p&gt;

&lt;p&gt;Un des intérêts de la transformation que nous avons opéré est que nous sommes également capable de lancer l&amp;rsquo;application très simplement à l&amp;rsquo;aide de descripteurs Docker ainsi que du docker-compose qui décrit les interactions entre nos services.&lt;/p&gt;

&lt;h2 id=&#34;process-de-livraison:dad4c2b1f4f43c57ed0806fbc2bfdf56&#34;&gt;Process de livraison&lt;/h2&gt;

&lt;p&gt;Pour effectuer la livraison de l&amp;rsquo;application, nous sommes passés d&amp;rsquo;un &lt;code&gt;git push&lt;/code&gt; vers heroku à un process impliquant Jenkins dans 3 étapes successives (mais qui s&amp;rsquo;enchaînent automatiquement) :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;construction de l&amp;rsquo;application et archivage dans un &lt;code&gt;tgz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;copie du tgz produit pour la construction d&amp;rsquo;une image Docker poussée vers notre dépôt interne&lt;/li&gt;
&lt;li&gt;lancement de l&amp;rsquo;application via un &lt;code&gt;docker-compose run -d&lt;/code&gt; sur les machines cibles&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;gestion-du-multi-environnement:dad4c2b1f4f43c57ed0806fbc2bfdf56&#34;&gt;Gestion du multi-environnement&lt;/h2&gt;

&lt;p&gt;Comme toutes les applications d&amp;rsquo;entreprise, nous déployons vers plusieurs environnement afin de valider la bonne tenue de l&amp;rsquo;application et la qualité de nos développements :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;dev / local : poste du développeur&lt;/li&gt;
&lt;li&gt;preprod : version à passer en production&lt;/li&gt;
&lt;li&gt;prod : version actuelle&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;À ceci, nous pouvons ajouter plusieurs versions en parallèle pour différentes fonctionnalités et/ou villes (l&amp;rsquo;info exclusive est cachée ici, Navig&amp;rsquo;VotreVille arrive…).
Pour être capable de gérer des déploiements différents nous avons ajouté quelques paramètres à nos scripts de lancement de docker-compose nous permettant de disposer de noms différents par projet pous éviter les problèmes.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android : Publier son apk en ligne de commande</title>
      <link>https://blog-7460a.firebaseapp.com/2015/11/04/android_publier_apk_avec_gradle</link>
      <pubDate>Wed, 04 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog-7460a.firebaseapp.com/2015/11/04/android_publier_apk_avec_gradle</guid>
      <description>

&lt;p&gt;Lorsque l’on fait du développement Android, on a régulièrement besoin de publier des nouvelles versions de l&amp;rsquo;application sur le Play Store.
Il est assez fastidieux de devoir se connecter à l’interface de Google, de sélectionner le projet et ensuite d’uploader son nouvel apk.&lt;/p&gt;

&lt;p&gt;Heureusement pour nous, Google a prévu le coup avec une API que l’on peut attaquer en ligne de commande.
Et, encore plus sympa, &lt;a href=&#34;https://plus.google.com/+Bj%C3%B6rnHurling/posts&#34;&gt;Björn Hurling&lt;/a&gt; a publié sur github
&lt;a href=&#34;https://github.com/Triple-T/gradle-play-publisher&#34;&gt;un plugin gradle qui utilise cette API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Voyons ensemble pas à pas comment et quoi configurer afin de livrer ses apk en ligne de commande en utilisant gradle.&lt;/p&gt;

&lt;h2 id=&#34;prérequis:004518072c85d3d30c7a81ad5c38fa96&#34;&gt;Prérequis&lt;/h2&gt;

&lt;p&gt;Pour commencer, il faut avoir un build qui fonctionne avec gradle.&lt;/p&gt;

&lt;p&gt;Normalement pas de problème si c&amp;rsquo;est un projet récent puisque c&amp;rsquo;est ce qu&amp;rsquo;Android Studio propose maintenant par défaut.
Si ce n&amp;rsquo;est pas le cas, vous pouvez vous reposer sur la &lt;a href=&#34;http://tools.android.com/tech-docs/new-build-system/intellij_to_gradle&#34;&gt;doc de Google&lt;/a&gt; à ce sujet.&lt;/p&gt;

&lt;h2 id=&#34;étape-1-création-du-service-account:004518072c85d3d30c7a81ad5c38fa96&#34;&gt;Étape 1 : Création du &amp;lsquo;Service Account&amp;rsquo;&lt;/h2&gt;

&lt;p&gt;La première étape consiste à créer un compte qui peut utilser l&amp;rsquo;API de Google : contrairement à un compte utilisateur classique, celui-ci utilisera un ficher de clé pour s&amp;rsquo;identifier plutôt qu&amp;rsquo;un mot de passe.&lt;/p&gt;

&lt;p&gt;Pour cela, rendez-vous dans un premier temps dans l&amp;rsquo;interface développeur du Play Store, dans la section &lt;code&gt;Settings &amp;gt; API acces&lt;/code&gt; et cliquez sur &lt;code&gt;Create Service Account&lt;/code&gt;.&lt;/p&gt;

&lt;div style=&#34;text-align:center;margin:50px&#34;&gt;
  &lt;a href=&#34;https://blog-7460a.firebaseapp.com/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_ConfigureAccount_Screen1.png&#34; data-lightbox=&#34;group-1&#34; title=&#34;Configuration de l&#39;Accout service - 1&#34; class=&#34;inlineBoxes&#34;&gt;
    &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_ConfigureAccount_Screen1.png&#34; alt=&#34;Configuration de l&#39;Accout service - 1&#34;/&gt;
  &lt;/a&gt;
  &lt;a href=&#34;https://blog-7460a.firebaseapp.com/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_ConfigureAccount_Screen2.png&#34; data-lightbox=&#34;group-1&#34; title=&#34;Configuration de l&#39;Accout service - 2&#34; class=&#34;inlineBoxes&#34;&gt;
    &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_ConfigureAccount_Screen2.png&#34; alt=&#34;Configuration de l&#39;Accout service - 2&#34;/&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;En suivant le lien du petit &lt;code&gt;1&lt;/code&gt; vous allez être redirigé vers la console Google développeur d&amp;rsquo;où vous pourrez créer un nouveau &lt;code&gt;Credential&lt;/code&gt;  de type &lt;code&gt;Service account&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Sélectionnez le format de clé &lt;code&gt;JSON&lt;/code&gt; qui est recommandé, le téléchargement de celle-ci devrait alors se faire automatiquement.&lt;/p&gt;

&lt;p&gt;On peut ensuite voir qu&amp;rsquo;un nouveau &lt;code&gt;Service account&lt;/code&gt; est apparu dans la liste des Credentials.&lt;/p&gt;

&lt;div style=&#34;text-align:center;margin:50px&#34;&gt;
  &lt;a href=&#34;https://blog-7460a.firebaseapp.com/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_ConfigureAccount_Screen3.png&#34; data-lightbox=&#34;group-1&#34; title=&#34;Configuration de l&#39;Accout service - 3&#34; class=&#34;inlineBoxes&#34;&gt;
    &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_ConfigureAccount_Screen3.png&#34; alt=&#34;Configuration de l&#39;Accout service - 3&#34;/&gt;
  &lt;/a&gt;
  &lt;a href=&#34;https://blog-7460a.firebaseapp.com/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_ConfigureAccount_Screen4.png&#34; data-lightbox=&#34;group-1&#34; title=&#34;Configuration de l&#39;Accout service - 4&#34; class=&#34;inlineBoxes&#34;&gt;
    &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_ConfigureAccount_Screen4.png&#34; alt=&#34;Configuration de l&#39;Accout service - 4&#34;/&gt;
  &lt;/a&gt;
  &lt;a href=&#34;https://blog-7460a.firebaseapp.com/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_ConfigureAccount_Screen5.png&#34; data-lightbox=&#34;group-1&#34; title=&#34;Configuration de l&#39;Accout service - 5&#34; class=&#34;inlineBoxes&#34;&gt;
    &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_ConfigureAccount_Screen5.png&#34; alt=&#34;Configuration de l&#39;Accout service - 5&#34;/&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;De retour sur l&amp;rsquo;interface d&amp;rsquo;admin du Play Store, on constate que le &lt;code&gt;Service Account&lt;/code&gt; est bien créé et disponible ici.&lt;/p&gt;

&lt;div style=&#34;text-align:center;margin:50px&#34;&gt;
  &lt;a href=&#34;https://blog-7460a.firebaseapp.com/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_ConfigureAccount_Screen6.png&#34; data-lightbox=&#34;group-1&#34; title=&#34;Configuration de l&#39;Accout service - 6&#34; class=&#34;inlineBoxes&#34;&gt;
    &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_ConfigureAccount_Screen6.png&#34; alt=&#34;Configuration de l&#39;Accout service - 6&#34;/&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;h2 id=&#34;étape-2-attribution-des-droits:004518072c85d3d30c7a81ad5c38fa96&#34;&gt;Étape 2 : Attribution des droits&lt;/h2&gt;

&lt;p&gt;Il faut maintenant donner les droits au compte que l&amp;rsquo;on vient de créer afin qu&amp;rsquo;il puisse au moins livrer les apk en alpha.&lt;/p&gt;

&lt;p&gt;Pour cela cliquez sur le bouton &lt;code&gt;Grant access&lt;/code&gt;. Dans la popup qui s&amp;rsquo;ouvre, les droits minimums à accorder pour que le plugin puisse fonctionnner sont :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Edit store listing, pricing &amp;amp; distribution&lt;/li&gt;
&lt;li&gt;Manage Production APKs&lt;/li&gt;
&lt;li&gt;Manage Alpha &amp;amp; Beta APKs&lt;/li&gt;
&lt;li&gt;Manage Alpha &amp;amp; Beta users&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ces choix pourront être modifés ultérieurement dans l&amp;rsquo;écran récapitulatif (mais ce n&amp;rsquo;est pas recommandé).&lt;/p&gt;

&lt;div style=&#34;text-align:center;margin:50px&#34;&gt;
  &lt;a href=&#34;https://blog-7460a.firebaseapp.com/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_ConfigureAccount_Screen7.png&#34; data-lightbox=&#34;group-1&#34; title=&#34;Configuration de l&#39;Accout service - 7&#34; class=&#34;inlineBoxes&#34;&gt;
    &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_ConfigureAccount_Screen7.png&#34; alt=&#34;Configuration de l&#39;Accout service - 7&#34;/&gt;
  &lt;/a&gt;
  &lt;a href=&#34;https://blog-7460a.firebaseapp.com/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_ConfigureAccount_Screen8.png&#34; data-lightbox=&#34;group-1&#34; title=&#34;Configuration de l&#39;Accout service - 8&#34; class=&#34;inlineBoxes&#34;&gt;
    &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_ConfigureAccount_Screen8.png&#34; alt=&#34;Configuration de l&#39;Accout service - 8&#34;/&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;h2 id=&#34;étape-3-le-plugin-gradle:004518072c85d3d30c7a81ad5c38fa96&#34;&gt;Étape 3 : le plugin gradle&lt;/h2&gt;

&lt;p&gt;Il faut maintenant configurer son build pour ajouter les informations relatives au plugin qui effectuera la livraison vers le Play Store.&lt;/p&gt;

&lt;p&gt;Dans le fichier &lt;code&gt;build.gradle&lt;/code&gt; du projet il faut donc rajouter la dépendance au plugin :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;buildscript {

    repositories {
        mavenCentral()
    }

    dependencies {
        // ...
        classpath &#39;com.github.triplet.gradle:play-publisher:1.1.4&#39;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et dans le &lt;code&gt;build.gradle&lt;/code&gt; de l&amp;rsquo;application (du Module), il faut appliquer le plugin au même niveau que le plugin Android :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apply plugin: &#39;com.android.application&#39;
apply plugin: &#39;com.github.triplet.play&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ensuite, toujours dans le &lt;code&gt;build.gradle&lt;/code&gt;, il est nécessaire d&amp;rsquo;ajouter les informations de l&amp;rsquo;&lt;code&gt;Account service&lt;/code&gt; précédemment créé pour qu&amp;rsquo;il puisse se connecter et faire la livraison
(c&amp;rsquo;est là que l&amp;rsquo;on va utiliser la clé &lt;code&gt;JSON&lt;/code&gt; générée).&lt;/p&gt;

&lt;p&gt;Placez donc la clé dans votre projet et faites-y référence dans la configuration du plugin :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;play {
    jsonFile = file(&#39;../publishKey/serviceAccountKeys.json&#39;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;À partir de là, notre build est configuré. On peut notamment s&amp;rsquo;en rendre compte en faisant un &lt;code&gt;./gradlew tasks&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;On y voit toutes les tâches gradle qu&amp;rsquo;on peut appeler :&lt;/p&gt;

&lt;div style=&#34;text-align:center;margin:50px&#34;&gt;
  &lt;a href=&#34;https://blog-7460a.firebaseapp.com/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_Gradlew_tasks_config_before.png&#34; data-lightbox=&#34;group-1&#34; title=&#34;Liste des tasks gradle disponibles sans le plugin&#34; class=&#34;inlineBoxes&#34;&gt;
    &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_Gradlew_tasks_config_before.png&#34; alt=&#34;Liste des tasks gradle disponibles sans le plugin&#34;/&gt;
  &lt;/a&gt;
  &lt;a href=&#34;https://blog-7460a.firebaseapp.com/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_Gradlew_tasks_config_after.png&#34; data-lightbox=&#34;group-1&#34; title=&#34;Liste des tasks gradle disponibles avec le plugin&#34; class=&#34;inlineBoxes&#34;&gt;
    &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_Gradlew_tasks_config_after.png&#34; alt=&#34;Liste des tasks gradle disponibles avec le plugin&#34;/&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Mais ce n&amp;rsquo;est pas suffisant car il manque notamment les tâches permettant l&amp;rsquo;upload de l&amp;rsquo;apk. Pour cela il faut rajouter la &lt;code&gt;signingConfigs&lt;/code&gt; dans le &lt;code&gt;build.gradle&lt;/code&gt;.
Ce qui peut notamment se faire comme ça :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    signingConfigs {
        release {
            storeFile file(&amp;quot;../keystore.jks&amp;quot;)
            storePassword &amp;quot;7r00p3r5&amp;quot;
            keyAlias &amp;quot;release&amp;quot;
            keyPassword &amp;quot;7r00p3r5&amp;quot;
        }
    }
    buildTypes {
        release {
            //...
            signingConfig signingConfigs.release
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Maintenant, on peut voir la présence de la tâche qui nous intéresse : &lt;code&gt;publishApkRelease&lt;/code&gt;&lt;/p&gt;

&lt;div style=&#34;text-align:center;margin:50px&#34;&gt;
  &lt;a href=&#34;https://blog-7460a.firebaseapp.com/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_Gradlew_tasks_config_complete.png&#34; data-lightbox=&#34;group-1&#34; title=&#34;Liste des tasks gradle disponibles avec upload apk&#34; class=&#34;inlineBoxes&#34;&gt;
    &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_Gradlew_tasks_config_complete.png&#34; alt=&#34;Liste des tasks gradle disponibles avec upload apk&#34;/&gt;
  &lt;/a&gt;
&lt;/div&gt;        

&lt;h2 id=&#34;étape-4-génération-et-upload:004518072c85d3d30c7a81ad5c38fa96&#34;&gt;Étape 4 : génération et upload&lt;/h2&gt;

&lt;p&gt;Pour effectuer un upload de l&amp;rsquo;apk il suffit maintenant d&amp;rsquo;appeler la tâche &lt;code&gt;publishApkRelease&lt;/code&gt;. Et pas besoin de générer l&amp;rsquo;apk signé via Android Studio puisque comme tout est configuré, il sera généré dans les tâches précédent l&amp;rsquo;uploadApk.&lt;/p&gt;

&lt;p&gt;Si tout se passe bien le build se termine avec un :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BUILD SUCCESSFUL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si il y a un problème lors de l&amp;rsquo;updload, il est affiché dans la console, par exemple si le &lt;strong&gt;version code&lt;/strong&gt; est déjà utilisé&lt;/p&gt;

&lt;div style=&#34;text-align:center;margin:50px&#34;&gt;
  &lt;a href=&#34;https://blog-7460a.firebaseapp.com/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_Gradlew_upload_ko.png&#34; data-lightbox=&#34;group-1&#34; title=&#34;Exemple d&#39;upload d&#39;apk en erreur&#34; class=&#34;inlineBoxes&#34;&gt;
    &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_Gradlew_upload_ko.png&#34; alt=&#34;Exemple d&#39;upload d&#39;apk en erreur&#34;/&gt;
  &lt;/a&gt;
&lt;/div&gt;    

&lt;p&gt;Ensuite vous pouvez vous rendre sur l&amp;rsquo;interface d&amp;rsquo;admin du Play Store et constater que l&amp;rsquo;upload d&amp;rsquo;un nouvel apk a bien eu lieu en alpha et le passer en bêta ou en production.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Attention&lt;/strong&gt; : ne pas commiter la clé &lt;code&gt;JSON&lt;/code&gt; sur github, au même titre que le mot de passe du &lt;code&gt;keystore&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;##Pour aller plus loin&lt;/p&gt;

&lt;p&gt;Le plugin permet bien plus de choses que la livraison des apks. En effet, il permet de mettre à jour la description, les images et le changelog.
Pour savoir comment configurer tout cela, je vous invite à consulter la page github du projet &lt;a href=&#34;https://github.com/Triple-T/gradle-play-publisher&#34;&gt;https://github.com/Triple-T/gradle-play-publisher&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;étape ultime de la livraison continue, c’est de configurer un jenkins pour qu’il livre en alpha à chaque nouveau commit sur master, et pour cela il suffit de le configurer en rajoutant par exemple une tâche post build qui fera appel à la commande gradle que nous venons de configurer.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Monitorer ses conteneurs Docker avec New Relic</title>
      <link>https://blog-7460a.firebaseapp.com/2015/09/30/newrelicdocker</link>
      <pubDate>Wed, 30 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog-7460a.firebaseapp.com/2015/09/30/newrelicdocker</guid>
      <description>

&lt;p&gt;Si vous ne conaissez pas New Relic, vous loupez quelque chose, c&amp;rsquo;est le service indispensable pour monitorer vos serveurs et vos applications. Il est capable d&amp;rsquo;une part de vous remonter les données physiques de vos serveurs (mémoire, cpu, espace disque), et d&amp;rsquo;autre part d&amp;rsquo;analyser les performances de vos applications (de nombreux langages sont disponibles). Il dispose aussi d&amp;rsquo;un système d&amp;rsquo;alerting, facilement configurable. Tous ces services sont disponibles en version gratuite, avec limitation (nombre de jour limité de rétention des données par exemple). Je vous laisse consulter le &lt;a href=&#34;http://www.newrelic.com&#34;&gt;site officiel&lt;/a&gt; pour plus de détail.&lt;/p&gt;

&lt;p&gt;Nous allons seulement parler du service de monitoring des serveurs dans cet article.&lt;/p&gt;

&lt;div style=&#34;float:right;margin:20px&#34;&gt;
    &lt;a href=&#34;https://blog-7460a.firebaseapp.com/images/postNewrelicDocker/new-relic.png&#34; data-lightbox=&#34;group-1&#34; title=&#34;New Relic Logo&#34; class=&#34;inlineBoxes&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/postNewrelicDocker/new-relic.png&#34; alt=&#34;New Relic Logo&#34;/&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;div class=&#34;clearfix&#34;&gt;&lt;/div&gt;

&lt;h2 id=&#34;et-docker-dans-tout-ça:bc5e987537bfb69a6aefddb2b5c9b04b&#34;&gt;Et Docker dans tout ça&lt;/h2&gt;

&lt;p&gt;Ce qui est encore plus fort avec le service de monitoring des serveurs de New Relic, c&amp;rsquo;est qu&amp;rsquo;il est capable de comprendre Docker et donc de vous remonter les données par conteneur.&lt;/p&gt;

&lt;div style=&#34;text-align:center;margin:50px&#34;&gt;
    &lt;a href=&#34;https://blog-7460a.firebaseapp.com/images/postNewrelicDocker/screen-newrelic-1.png&#34; data-lightbox=&#34;group-3&#34; title=&#34;Screen 1 New Relic&#34; class=&#34;inlineBoxes&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/postNewrelicDocker/screen-newrelic-1.png&#34; alt=&#34;Screen 1 New Relic&#34;/&gt;
    &lt;/a&gt;
    &lt;a href=&#34;https://blog-7460a.firebaseapp.com/images/postNewrelicDocker/screen-newrelic-2.png&#34; data-lightbox=&#34;group-3&#34; title=&#34;Screen 2 New Relic&#34; class=&#34;inlineBoxes&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/postNewrelicDocker/screen-newrelic-2.png&#34; alt=&#34;Screen 2 New Relic&#34;/&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;div class=&#34;clearfix&#34;&gt;&lt;/div&gt;

&lt;h2 id=&#34;comment-l-installer:bc5e987537bfb69a6aefddb2b5c9b04b&#34;&gt;Comment l&amp;rsquo;installer&lt;/h2&gt;

&lt;p&gt;Avec Docker bien sûr, il faut au préalable s&amp;rsquo;être créé un compte sur le site New Relic pour obtenir l&amp;rsquo;accès à l&amp;rsquo;interface et pouvoir se créer une clé (à remplacer dans la ligne de commande suivante).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d \
    --privileged=true --name newrelic
    --pid=host \
    --net=host \
    -v /sys:/sys \
    -v /dev:/dev \
    --restart=always \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v /var/log:/var/log:rw \
    -e NRSYSMOND_license_key=&amp;lt;KEY&amp;gt; \
    -e NRSYSMOND_logfile=/var/log/nrsysmond.log \
    newrelic/nrsysmond:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vous trouverez toutes les informations &lt;a href=&#34;https://hub.docker.com/r/newrelic/nrsysmond/&#34;&gt;ici&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android M - Nouvelle gestion de permission</title>
      <link>https://blog-7460a.firebaseapp.com/2015/09/22/android_m_permissions</link>
      <pubDate>Tue, 22 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog-7460a.firebaseapp.com/2015/09/22/android_m_permissions</guid>
      <description>

&lt;h1 id=&#34;nouvelle-approche:84bad094dd5fba286487f6a75a705f1d&#34;&gt;Nouvelle approche&lt;/h1&gt;

&lt;p&gt;Avec la prochaine release d&amp;rsquo;&lt;code&gt;Android 6.0 Marshmallow&lt;/code&gt;, il va y avoir du changement au niveau de la gestion des permissions.
Terminé la popup qui demande les 10 autorisations au moment du téléchargement de l&amp;rsquo;appli, maintenant les développeurs vont pouvoir demander les permissions au moment où elles seront nécessaires.&lt;/p&gt;

&lt;h3 id=&#34;permissions-irrévocables:84bad094dd5fba286487f6a75a705f1d&#34;&gt;Permissions irrévocables&lt;/h3&gt;

&lt;p&gt;Puisqu&amp;rsquo;il va falloir demander à l&amp;rsquo;utilisateur pour chaque permission, Google a décidé que certaines anciennes permissions n&amp;rsquo;auront plus besoin d&amp;rsquo;être demandées,
 ce sont les &lt;code&gt;Normal Permissions&lt;/code&gt;. Il s&amp;rsquo;agit des permissions qui n&amp;rsquo;engendrent pas de risque sur la vie privée ou sur la sécurité de l&amp;rsquo;utilisateur comme c&amp;rsquo;est par exemple le cas pour l&amp;rsquo;accès à internet ou l&amp;rsquo;accès au vibreur :
 la liste complète est disponible &lt;a href=&#34;https://developer.android.com/preview/features/runtime-permissions.html#normal&#34;&gt;ici&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;guidelines:84bad094dd5fba286487f6a75a705f1d&#34;&gt;Guidelines&lt;/h3&gt;

&lt;p&gt;Pour ce qui est de l&amp;rsquo;UX, Google a fait plusieurs recommandations dont certaines sont plus importantes que d&amp;rsquo;autres, à mon avis :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ne demander une permisission qu&amp;rsquo;au moment où l&amp;rsquo;on en a vraiment besoin, ce qui implique de ne pas avoir un popup au lancement qui va demander toutes les permissions ;&lt;/li&gt;
&lt;li&gt;Faire le maximum pour ne pas gâcher l&amp;rsquo;experience utilisateur même s&amp;rsquo;il refuse une permission : donc prévoir un mode dégradé autant que possible ;&lt;/li&gt;
&lt;li&gt;Utiliser les méthodes disponibles dans appcompat plutôt que celles du sdk de base.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;mise-en-pratique:84bad094dd5fba286487f6a75a705f1d&#34;&gt;Mise en pratique&lt;/h1&gt;

&lt;p&gt;Avant de commencer à coder, une dernière chose à garder à l&amp;rsquo;esprit c&amp;rsquo;est que l&amp;rsquo;utilisateur peut à tout moment révoquer une permission via le détail de l&amp;rsquo;application (même une fois que l&amp;rsquo;appli est lancée et tourne en background).
 Il faudra donc adapter la gestion de ces permissions à cette éventualité.&lt;/p&gt;

&lt;div style=&#34;text-align:center;margin-bottom:50px&#34;&gt;
    &lt;a href=&#34;https://blog-7460a.firebaseapp.com/images/2015-09-AndroidMPermissions/p6.png&#34; data-lightbox=&#34;group-1&#34; title=&#34;Écran App Info&#34; class=&#34;inlineBoxes&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/2015-09-AndroidMPermissions/p6.png&#34; alt=&#34;Écran App Info&#34;/&gt;
    &lt;/a&gt;
    &lt;a href=&#34;https://blog-7460a.firebaseapp.com/images/2015-09-AndroidMPermissions/p5.png&#34; data-lightbox=&#34;group-1&#34; title=&#34;Écran App Info : détail des permissions&#34;  class=&#34;inlineBoxes&#34;&gt;
            &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/2015-09-AndroidMPermissions/p5.png&#34; alt=&#34;Écran App Info : détail des permissions&#34;/&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;h2 id=&#34;ne-pas-implémenter-les-nouvelles-permissions:84bad094dd5fba286487f6a75a705f1d&#34;&gt;Ne pas implémenter les nouvelles permissions&lt;/h2&gt;

&lt;p&gt;Chose importante à savoir, vous n&amp;rsquo;êtes pas obligés d&amp;rsquo;implémenter cette nouvelle gestion de permission.
En effet, puisqu&amp;rsquo;elle demande du développoment supplémentaire, de nombreuses applis ne seront pas mises à jour et garderont donc l&amp;rsquo;ancien fonctionnement.
Si c&amp;rsquo;est ce que vous souhaitez, et pour ne pas nuire au bon fonctionnement de votre appli, il vous suffit de ne pas cibler le dernier &lt;code&gt;sdk&lt;/code&gt; dans votre build.gradle et de rester sur le &lt;code&gt;22&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;implémenter-les-nouvelles-permissions:84bad094dd5fba286487f6a75a705f1d&#34;&gt;Implémenter les nouvelles permissions&lt;/h2&gt;

&lt;p&gt;Pour cela, 3 étapes sont nécessaires, principalement disponibles dans le sdk 23 ainsi que dans la lib appcompat :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;requestPermissions()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onRequestPermissionsResult()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shouldShowRequestPermissionRationale()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;build-gradle:84bad094dd5fba286487f6a75a705f1d&#34;&gt;Build.gradle&lt;/h3&gt;

&lt;p&gt;Permière étape, cibler la dernier version du &lt;code&gt;sdk&lt;/code&gt; : &lt;code&gt;23&lt;/code&gt;.
Et en bonus, importer appcompat pour bénéficier des méthodes helpers de Google.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;compileSdkVersion 23
defaultConfig {
    targetSdkVersion 23
}
dependencies {
    compile &#39;com.android.support:appcompat-v7:23.0.1&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;androidmanifest-xml:84bad094dd5fba286487f6a75a705f1d&#34;&gt;AndroidManifest.xml&lt;/h3&gt;

&lt;p&gt;Ensuite, déclarer les permissions désirées dans l&amp;rsquo;application, normalement il n&amp;rsquo;y a pas de changements par rapport à votre configuration actuelle&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;uses-permission android:name=&amp;quot;android.permission.CAMERA&amp;quot; /&amp;gt;
&amp;lt;uses-permission android:name=&amp;quot;android.permission.READ_CONTACTS&amp;quot; /&amp;gt;
&amp;lt;uses-permission android:name=&amp;quot;android.permission.ACCESS_FINE_LOCATION&amp;quot; /&amp;gt;
&amp;lt;uses-permission android:name=&amp;quot;android.permission.SEND_SMS&amp;quot; /&amp;gt;
&amp;lt;uses-permission android:name=&amp;quot;android.permission.READ_EXTERNAL_STORAGE&amp;quot; /&amp;gt;
&amp;lt;uses-permission android:name=&amp;quot;android.permission.CALL_PHONE&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;N&amp;rsquo;oubliez pas d&amp;rsquo;y déclarer aussi les &lt;code&gt;Normal Permissions&lt;/code&gt; qui, bien qu&amp;rsquo;elles soient automatiquement accordées, ont toujours besoin d&amp;rsquo;être déclarées.&lt;/p&gt;

&lt;h3 id=&#34;dans-une-activité:84bad094dd5fba286487f6a75a705f1d&#34;&gt;Dans une activité&lt;/h3&gt;

&lt;p&gt;Dans un premier temps il faut vérifier si une permission est déjà accordée ou non&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ContextCompat.checkSelfPermission(context, Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si la permission n&amp;rsquo;est pas accordée, il va falloir la demander, de préférence lors d&amp;rsquo;une action utilisateur, par exemple au click sur un bouton&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ActivityCompat.requestPermissions(MainActivity.this,
                                  new String[]{Manifest.permission.CAMERA},
                                  REQUEST_CODE_ONE);
&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&#34;text-align:center;margin-bottom:50px&#34;&gt;
    &lt;a href=&#34;https://blog-7460a.firebaseapp.com/images/2015-09-AndroidMPermissions/p1.png&#34; data-lightbox=&#34;group-1&#34; title=&#34;Dialog de demande d&#39;une permission&#34; class=&#34;inlineBoxes&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/2015-09-AndroidMPermissions/p1.png&#34; alt=&#34;Dialog de demande d&#39;une permission&#34;/&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Puis écouter le choix de l&amp;rsquo;utilisateur, dans l&amp;rsquo;activité ou le fragment correspondant&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Override
public void onRequestPermissionsResult(int requestCode, String permissions[], int[] grantResults) {
    switch (requestCode) {
        case REQUEST_CODE_ONE: {
            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                Toast.makeText(this, &amp;quot;Permission granted&amp;quot;, Toast.LENGTH_LONG).show();
            } else {
                Toast.makeText(this, &amp;quot;Permission denied&amp;quot;, Toast.LENGTH_LONG).show();
            }
            return;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;demander-plusieurs-permissions-en-même-temps:84bad094dd5fba286487f6a75a705f1d&#34;&gt;Demander plusieurs permissions en même temps&lt;/h3&gt;

&lt;p&gt;Même si cela est déconseillé, il peut arriver d&amp;rsquo;avoir besoin de plusieurs permissions lors de la même action utilisateur.
Pour cela il suffit de passer plusieurs permissions dans le tableau passé en paramètre du requestPermission&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ActivityCompat.requestPermissions(MainActivity.this,
                                  new String[]{Manifest.permission.READ_CONTACTS, Manifest.permission.ACCESS_FINE_LOCATION},
                                  REQUEST_CODE_TWO);
&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&#34;text-align:center;margin-bottom:50px&#34;&gt;
    &lt;a href=&#34;https://blog-7460a.firebaseapp.com/images/2015-09-AndroidMPermissions/p2.png&#34; data-lightbox=&#34;group-1&#34; title=&#34;Dialog de demande de plusieurs permissions 1/2&#34; class=&#34;inlineBoxes&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/2015-09-AndroidMPermissions/p2.png&#34; alt=&#34;Dialog de demande de plusieurs permissions 1/2&#34;/&gt;
    &lt;/a&gt;
&lt;a href=&#34;https://blog-7460a.firebaseapp.com/images/2015-09-AndroidMPermissions/p3.png&#34; data-lightbox=&#34;group-1&#34; title=&#34;Dialog de demande de plusieurs permissions 2/2&#34; class=&#34;inlineBoxes&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/2015-09-AndroidMPermissions/p3.png&#34; alt=&#34;Dialog de demande de plusieurs permissions 2/2&#34;/&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;h3 id=&#34;expliquer-à-l-utilisateur-pourquoi-il-doit-autoriser-une-permission:84bad094dd5fba286487f6a75a705f1d&#34;&gt;Expliquer à l&amp;rsquo;utilisateur pourquoi il doit autoriser une permission&lt;/h3&gt;

&lt;p&gt;Il arrivera sûrement que certains utilsateurs refusent des permissions et que cela détériore l&amp;rsquo;expérience utilisateur sur l&amp;rsquo;application. Pour cela, Google fourni un helper pour savoir ou non s&amp;rsquo;il faut afficher un message d&amp;rsquo;information à l&amp;rsquo;utilisateur (graphique).
Cela se fera avec la méthode shouldShowRequestPermissionRationale&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (shouldShowRequestPermissionRationale(Manifest.permission.CALL_PHONE)) {
     new AlertDialog.Builder(MainActivity.this)
                               .setMessage(&amp;quot;Custom message to explain why you need a permission&amp;quot;)
                               .setPositiveButton(&amp;quot;OK&amp;quot;, new DialogInterface.OnClickListener() {
                                   @Override
                                   public void onClick(DialogInterface dialog, int which) {
                                       ActivityCompat.requestPermissions(MainActivity.this,
                                               new String[]{Manifest.permission.CALL_PHONE},
                                               REQUEST_CODE_FIVE);
                                   }
                               })
                               .setNegativeButton(&amp;quot;Cancel&amp;quot;, null)
                               .create()
                               .show();
}
ActivityCompat.requestPermissions(MainActivity.this,
                                  new String[]{Manifest.permission.CALL_PHONE},
                                  REQUEST_CODE_FIVE);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&#34;text-align:center;margin-bottom:50px&#34;&gt;
    &lt;a href=&#34;https://blog-7460a.firebaseapp.com/images/2015-09-AndroidMPermissions/p4.png&#34; data-lightbox=&#34;group-1&#34; title=&#34;Dialog d&#39;explication sur une demande de permissions&#34; class=&#34;inlineBoxes&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/2015-09-AndroidMPermissions/p4.png&#34; alt=&#34;Dialog d&#39;explication sur une demande de permissions&#34;/&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;h3 id=&#34;le-piège-à-éviter:84bad094dd5fba286487f6a75a705f1d&#34;&gt;Le piège à éviter&lt;/h3&gt;

&lt;p&gt;Penser à vérifier régulièrement l&amp;rsquo;état des permissions dans le &lt;em&gt;onResume()&lt;/em&gt; de vos Activity ou Fragment, étant donné que l&amp;rsquo;utilsateur peut à tout moment les révoquer cela permettra d&amp;rsquo;éviter de nombreux crashs.&lt;/p&gt;

&lt;h2 id=&#34;resources:84bad094dd5fba286487f6a75a705f1d&#34;&gt;Resources&lt;/h2&gt;

&lt;p&gt;Code source d&amp;rsquo;exemple : &lt;a href=&#34;https://github.com/fchauveau/android-permissions-sample&#34;&gt;https://github.com/fchauveau/android-permissions-sample&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Doc développeur Android : &lt;a href=&#34;https://developer.android.com/preview/features/runtime-permissions.html&#34;&gt;https://developer.android.com/preview/features/runtime-permissions.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Guidelines Android : &lt;a href=&#34;https://developer.android.com/preview/features/runtime-permissions.html&#34;&gt;http://www.google.fr/design/spec/patterns/permissions.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Explication sur quand demander une permission : &lt;a href=&#34;https://www.youtube.com/watch?v=iZqDdvhTZj0&#34;&gt;https://www.youtube.com/watch?v=iZqDdvhTZj0&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Owncloud : solution de cloud en 5 min avec Docker</title>
      <link>https://blog-7460a.firebaseapp.com/2015/09/09/ownclouddocker</link>
      <pubDate>Wed, 09 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog-7460a.firebaseapp.com/2015/09/09/ownclouddocker</guid>
      <description>

&lt;p&gt;Que ce soit pour des raisons politique de confidentialité ou des raisons technique, &lt;a href=&#34;https://owncloud.org/&#34;&gt;Owncloud&lt;/a&gt; a énormément de qualités comparé à Dropbox ou Google drive. Déjà car la limite de taille des données est celle du serveur, ensuite car des applications sous linux permettent de synchroniser des dossiers et enfin car il existe une multitude d&amp;rsquo;addons qui permettent de sauvegarder ses mots de passe, jouer de la musique, envoyer des notifs sur Slack etc.&lt;/p&gt;

&lt;p&gt;La mise en production d&amp;rsquo;une instance Owncloud se fait en 5 minutes montre en main, à condition de connaître un minimum Docker.&lt;/p&gt;

&lt;h2 id=&#34;nginx-proxy:be69fc223dd7ef731bed748a197f33c8&#34;&gt;Nginx/proxy&lt;/h2&gt;

&lt;p&gt;Nous allons commencer par une petite digression. Avant quand on avait plusieurs &amp;ldquo;virtual host&amp;rdquo; qui pointaient sur une machine, on mettait un front-end apache et c&amp;rsquo;était plus ou moins la galère. Maintenant, il suffit de lancer cette commande une fois :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --restart=always --name nginx -d -p 80:80 -p 443:443 -v /docker/vhost.d:/etc/nginx/vhost.d:ro -v /var/run/docker.sock:/tmp/docker.sock:ro jwilder/nginx-proxy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On pourra alors rajouter la variable d&amp;rsquo;environnement &lt;code&gt;VIRTUAL_HOST&lt;/code&gt; à chaque nouvelle image Docker pour qu&amp;rsquo;elle soit directement accessible. Ce qui est magique aussi c&amp;rsquo;est que si on expose un seul port de l&amp;rsquo;image Docker alors il est directement mappé sur le port 80, même si le port n&amp;rsquo;était pas forwardé sur le host. Dernier avantage, si on met deux machines avec le même nom il va s&amp;rsquo;occuper de faire du load balancing tout seul !&lt;/p&gt;

&lt;p&gt;Si jamais la configuration par défaut ne convient pas, il faut rajouter un fichier de configuration dans &lt;code&gt;/docker/vhost.d/&lt;/code&gt;. Dans notre cas nous en avons eu besoin pour permettre d&amp;rsquo;uploader des fichiers plus gros (c&amp;rsquo;est 2 Mo par défaut).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat /docker/vhost.d/owncloud.hostname.com
client_max_body_size 100m;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;docker-compose:be69fc223dd7ef731bed748a197f33c8&#34;&gt;Docker-compose&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker-compose&lt;/a&gt; est un outil très pratique pour gérer les options d&amp;rsquo;une image docker. Il faut souvent lancer une image Docker avec des variables d&amp;rsquo;environnement, des liens et des volumes, et quelques semaines plus tard, on ne se souvient plus comment on a lancé les images. Là on n&amp;rsquo;a plus que une seule commande pour gérer toutes les images d&amp;rsquo;un coup et les options sont lisibles facilement.&lt;/p&gt;

&lt;p&gt;Rentrons dans le vif du sujet :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mariaOC:
  image: mariadb
  volumes:
   - /home/owncloud/db:/var/lib/mysql
  environment:
   - MYSQL_ROOT_PASSWORD=passwordRoot
   - MYSQL_USER=owncloud-production
   - MYSQL_DATABASE=owncloud-production
   - MYSQL_PASSWORD=passwordUser
   - TZ=Europe/Paris
owncloud:
  image: jchaney/owncloud
  volumes:
    - /home/owncloud/data:/var/www/owncloud/data
    - /home/owncloud/logs/nginx:/var/log/nginx
    - /home/owncloud/logs/cron:/var/log/cron
    - /etc/ssl/certs/ssl-cert-snakeoil.pem:/etc/ssl/certs/ssl-cert-snakeoil.pem:ro
    - /etc/ssl/private/ssl-cert-snakeoil.key:/etc/ssl/private/ssl-cert-snakeoil.key:ro
  environment:
    - VIRTUAL_HOST=owncloud.hostname.com
    - MYSQL_ROOT_PASSWORD=passwordRoot
    - MYSQL_USER=owncloud-production
    - MYSQL_DATABASE=owncloud-production
    - MYSQL_PASSWORD=passwordUser
    - TZ=Europe/Paris
    - OWNCLOUD_IN_ROOTPATH=1
    - OWNCLOUD_SERVER_NAME=owncloud.hostname.com
    - SSL_CERT=/etc/ssl/certs/ssl-cert-snakeoil.pem
    - SSL_KEY=/etc/ssl/private/ssl-cert-snakeoil.key
  links:
    - mariaOC:db
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Voici le fichier docker-compose.yml utilisé. On définit une image de &lt;a href=&#34;https://mariadb.org/&#34;&gt;MariaDB&lt;/a&gt; pour laquelle on spécifie un volume qui va recevoir les données et différentes variables d&amp;rsquo;environnements dont les noms sont assez explicite.
Puis une image owncloud avec des volumes pour les fichiers que l&amp;rsquo;on va sauvegarder, les logs et la clé SSL. Un lien avec la base de donnée MariaDB et quelques variables d&amp;rsquo;environnements, là encore les noms sont suffisamment explicite.&lt;/p&gt;

&lt;p&gt;Une fois les variables modifiées selon notre volonté, il faut lancer les commandes &lt;code&gt;docker-compose build&lt;/code&gt; suivi de &lt;code&gt;compose-docker up -d&lt;/code&gt; et aller sur owncloud.hostname.com pour finir l&amp;rsquo;installation.&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;article est déjà fini, comme je le disais, ça se fait en un rien de temps. Mais si cela a été aussi rapide, c&amp;rsquo;est parce que Owncloud a une image très bien faîtes donc merci Josh de l&amp;rsquo;avoir mise à disposition &lt;a href=&#34;https://github.com/jchaney/owncloud&#34;&gt;https://github.com/jchaney/owncloud&lt;/a&gt;&lt;/p&gt;

&lt;div style=&#34;text-align:center;margin-bottom:50px&#34;&gt;
    &lt;a href=&#34;https://blog-7460a.firebaseapp.com/images/postOwncloudDocker/owncloud.png&#34; data-lightbox=&#34;group-1&#34; title=&#34;Owncloud site et appli&#34; class=&#34;inlineBoxes&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/postOwncloudDocker/owncloud.png&#34; alt=&#34;Owncloud site et appli&#34;/&gt;
    &lt;/a&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>GIT-SVN comment survivre dans un environnement hostile</title>
      <link>https://blog-7460a.firebaseapp.com/2015/07/16/gitsvn</link>
      <pubDate>Thu, 16 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog-7460a.firebaseapp.com/2015/07/16/gitsvn</guid>
      <description>

&lt;p&gt;Git c’est cool, Git c’est Hype, Git c’est tout récent (&lt;a href=&#34;http://git-scm.com/book/fr/v1/D%C3%A9marrage-rapide-Une-rapide-histoire-de-Git&#34;&gt;enfin presque&lt;/a&gt;) et c’est pour ça qu’on aime bien.
Mais pour beaucoup Git c’est nouveau, donc c’est le changement, donc c’est compliqué, et c’est pour ça que plein de boîtes préfèrent garder leur serveur svn.&lt;/p&gt;

&lt;p&gt;Je vais tenter ici, de vous donner les principales commandes de &lt;code&gt;Git-SVN&lt;/code&gt;. Ainsi si vous vous trouvez dans une boîte qui ne veut pas changer son scm mais que vous, vous avez envie de changement,
vous pourrez donc utiliser la puissance de Git.
Et ce sans aucun impact sur le gestionnaire de sources de la société dans laquelle vous êtes. C&amp;rsquo;est génial non ?&lt;/p&gt;

&lt;h2 id=&#34;prérequis:670b5efaab07fcd0dc591466ac7460f0&#34;&gt;Prérequis&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Avoir Git-SVN d&amp;rsquo;installé ! Et ce qui est bien fait, c&amp;rsquo;est que Git-SVN fait partie intégrante de Git. C&amp;rsquo;est donc Git que vous allez installer : &lt;a href=&#34;http://www.git-scm.com&#34;&gt;www.git-scm.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Un accès au svn (l&amp;rsquo;url du projet qui vous intéresse fera largement l&amp;rsquo;affaire)&lt;/li&gt;
&lt;li&gt;Un terminal&lt;/li&gt;
&lt;li&gt;Un tout petit peu de courage&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;init-du-projet:670b5efaab07fcd0dc591466ac7460f0&#34;&gt;Init du Projet&lt;/h2&gt;

&lt;p&gt;Le cas le plus courant est celui où tout le monde travaille sur le trunk du projet, et je vais partir de ce cas pour ce guide.
Si ce n&amp;rsquo;est pas le cas, il n&amp;rsquo;y a pas de gros changement, mais je vous invite à consulter plus en détail &lt;a href=&#34;https://git-scm.com/docs/git-svn&#34;&gt;la doc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Donc si on se met dans la situation où tout le monde travaille sur le trunk, pour récupérer les sources du projet dans un nouveau répertoire vous devrez faire un :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git svn clone http://maboite/svn/monBeauProjet/ -s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Par contre dès que le repo svn est un peu vieux (i.e. avec plein de commits) ça va mettre 3h ! En effet, Git va prendre les révisions une par une afin de créer son historique local.
Si vous n’avez pas besoin de tout l’historique des révisions ce que vous pouvez faire c’est :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git svn clone http://maboite/svn/monBeauProjet/ -s -r4000:HEAD
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ainsi il ne crééra l’histo qu’à partir de la révision 4000 du svn. Je vous conseille donc de prendre le 4000 le plus proche de la dernière révision.&lt;/p&gt;

&lt;p&gt;À partir de là c’est bon, vous avez votre projet qui est géré par Git. La preuve vous pouvez tester via ces différentes commandes&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git status
git branch -a
git log -n5
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;travailler-sur-le-projet-en-local:670b5efaab07fcd0dc591466ac7460f0&#34;&gt;Travailler sur le projet (en local)&lt;/h2&gt;

&lt;p&gt;Vous pouvez donc dès à présent commencer à travailler offline ou bien sans vous soucier des commits de vos collègues.
Et cela avec tous les avantages que Git apporte.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git commit -m&amp;quot;Ajout de la modification du mot de passe par l&#39;admin&amp;quot;
git stash save “Début de ma tâche prioritaire”
... // un peu de travail urgent
git stash pop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On peut même faire des branches Git (en local) sans que cela n&amp;rsquo;impacte le serveur.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout -b myLocalBranch
... // du travail avec plein de petits commits
git checkout master
git merge myLocalBranch
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;commiter-sur-le-svn:670b5efaab07fcd0dc591466ac7460f0&#34;&gt;Commiter sur le svn&lt;/h2&gt;

&lt;p&gt;Ensuite pour se synchroniser avec vos collègues (c&amp;rsquo;est mieux) les deux commandes indispensables sont&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git svn rebase
git svn dcommit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le &lt;code&gt;git svn rebase&lt;/code&gt; va faire l&amp;rsquo;équivalent d&amp;rsquo;un svn update quant au &lt;code&gt;git svn dcommit&lt;/code&gt; ça sera un svn commit.&lt;/p&gt;

&lt;h2 id=&#34;bonus-utiliser-des-branches:670b5efaab07fcd0dc591466ac7460f0&#34;&gt;Bonus : Utiliser des branches&lt;/h2&gt;

&lt;p&gt;Bon soyons honnêtes si vous utilisez un svn il y a quand même peu de chances que les branches soient vraiment utilisées (ou alors peut-être que vous aimez la douleur). Mais si ça arrive, voilà comment les utiliser.&lt;/p&gt;

&lt;p&gt;Mettre à jour toutes les branches du svn :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git svn fetch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Changer de branche :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout -b &amp;lt;brancheDistante&amp;gt; &amp;lt;nomDeBrancheLocale&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et maintenant vous pouvez naviguer entre vos branches normalement via Git  :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout master
git checkout nomDeBrancheLocale
git checkout -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;et par exemple pour recopier un commit d&amp;rsquo;une branche à une autre sans copier manuellement le fichier.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git cherry-pick
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Voilà vous avez maintenant les bases pour utiliser Git alors que de premier abord cela ne semblait pas possible.
Il ne vous reste plus qu&amp;rsquo;à forcer un peu plus pour remplacer l&amp;rsquo;ancien serveur svn par un nouveau sous Git et comme ça toute votre boîte pourra en profiter.
&lt;br/&gt;
&lt;br/&gt;
Pour connaître les principales commandes Git, je vous invite à consulter &lt;a href=&#34;http://git-scm.com/docs/gittutorial&#34;&gt;la page tutoriel de Git&lt;/a&gt; ou alors de chercher sur &lt;a href=&#34;http://lmgtfy.com/?q=git+commands&#34;&gt;internet&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installer votre dépot privé Docker</title>
      <link>https://blog-7460a.firebaseapp.com/2015/06/25/installdockerregistry</link>
      <pubDate>Thu, 25 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog-7460a.firebaseapp.com/2015/06/25/installdockerregistry</guid>
      <description>

&lt;p&gt;Petit à petit chez Code-Troopers, nous migrons tous nos développements pour utiliser Docker.
Cela fait quelque temps que nous l&amp;rsquo;utilisons pour des projets &amp;ldquo;public&amp;rdquo;, auquel cas le registry public Docker est largement suffisant (et immédiat à utiliser).&lt;/p&gt;

&lt;p&gt;En revanche, nous commençons à migrer nos applications de production également vers Docker, et nous ne pouvons pas utiliser le mode public du registry public.
Nous nous sommes donc mis à déployer un dépôt privé, authentifié par utilisateur / mot de passe.&lt;/p&gt;

&lt;p&gt;La procédure n&amp;rsquo;est pas très complexe, mais cette opération reste une bonne opportunité d&amp;rsquo;écrire un article à ce sujet (les articles en français n&amp;rsquo;étant pas légion).&lt;/p&gt;

&lt;h2 id=&#34;step-by-step:5ccf6384c70e5ed97658dbf0e91e8805&#34;&gt;Step by step&lt;/h2&gt;

&lt;p&gt;Il faut créer une entrée DNS pour votre service.&lt;/p&gt;

&lt;p&gt;Puis nous allons utiliser l&amp;rsquo;image Docker avec nginx pour l&amp;rsquo;authentification &lt;a href=&#34;https://github.com/MarvAmBass/docker-nginx-registry-proxy&#34;&gt;docker-nginx-registry-proxy&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;informations-d-identification:5ccf6384c70e5ed97658dbf0e91e8805&#34;&gt;Informations d&amp;rsquo;identification&lt;/h2&gt;

&lt;p&gt;Pour les étapes suivantes, placez vous dans le répertoire de votre choix pour stocker les fichiers (dans ce cas nous sommes dans &lt;code&gt;/srv/registry-config&lt;/code&gt;)&lt;/p&gt;

&lt;h3 id=&#34;génération-du-certificat:5ccf6384c70e5ed97658dbf0e91e8805&#34;&gt;Génération du certificat&lt;/h3&gt;

&lt;p&gt;Pensez à bien renseigner le FQDN DNS lors de la demande de Common Name pour le certificat.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;openssl genrsa -out ca.key 4096
openssl req -new -x509 -days 1826 -key ca.key -out ca.crt
openssl genrsa -out ia.key 4096
openssl req -new -key key.pem -out ia.csr #this is where you need to fill your FQDN
openssl x509 -req -days 730 -in ia.csr -CA ca.crt -CAkey ca.key -set_serial 01 -out cert.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;génération-des-mots-de-passes-basic-auth:5ccf6384c70e5ed97658dbf0e91e8805&#34;&gt;Génération des mots de passes basic auth&lt;/h3&gt;

&lt;p&gt;En utilisant un container docker qui embarque htpasswd vous pourrez générer facilement le fichier nécessaire :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --rm -ti -v $(pwd):/tmp dgageot/htpasswd -c /tmp/docker-registry.htpasswd $MONUSER
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;démarrage-du-registry:5ccf6384c70e5ed97658dbf0e91e8805&#34;&gt;Démarrage du registry&lt;/h2&gt;

&lt;p&gt;Les images seront stockées dans le répertoire &lt;code&gt;/srv/registry&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir /srv/registry
docker run -d --restart=always --name registry -v /srv/docker-registry:/registry -e &amp;quot;SETTINGS_FLAVOR=local&amp;quot; -e &amp;quot;STORAGE_PATH=/registry&amp;quot; registry
docker run -d --restart=always -p 443:443 -v /srv/registry-config:/etc/nginx/external --link registry:registry --name nginx-registry-proxy marvambass/nginx-registry-proxy
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configuration-d-une-machine-cliente:5ccf6384c70e5ed97658dbf0e91e8805&#34;&gt;Configuration d&amp;rsquo;une machine cliente&lt;/h2&gt;

&lt;h3 id=&#34;importer-le-certificat-racine:5ccf6384c70e5ed97658dbf0e91e8805&#34;&gt;Importer le certificat racine&lt;/h3&gt;

&lt;p&gt;Il faut importer le certificat racine dans la liste des certificats reconnus&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo -s
mkdir -p /etc/docker/certs.d/$FQDN
cp ca.crt /etc/docker/certs.d/$FQDN/

mkdir -p /usr/local/share/ca-certificates/docker-ct
cp ca.crt /usr/local/share/ca-certificates/docker-ct/
update-ca-certificates-
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pour vérifier que tout fonctionne comme attendu, vous pouvez voir si votre certificat ressort bien dans la commande suivante :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;awk -v cmd=&#39;openssl x509 -noout -subject&#39; &#39; /BEGIN/{close(cmd)};{print | cmd}&#39; &amp;lt; /etc/ssl/certs/ca-certificates.crt | grep $(VOTRE IDENTIFIANT)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vous serez également certainement amené à redémarrer vos daemon docker (de chacune des machines)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;systemctl stop docker
systemctl start docker
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;identification-sur-le-dépot:5ccf6384c70e5ed97658dbf0e91e8805&#34;&gt;Identification sur le dépot&lt;/h3&gt;

&lt;p&gt;Une fois que toutes ces étapes sont effectuées, normalement votre dépot est prêt à être utilisé.&lt;/p&gt;

&lt;p&gt;Il vous faut cependant en première étape vous identifier à l&amp;rsquo;aide du couple utilisateur / mot de passe créé lors de l&amp;rsquo;installation :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker login https://mondepotdocker.tld
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ceci aura pour effet de créer un fichier &lt;code&gt;~/.dockercfg&lt;/code&gt; vous permettant d&amp;rsquo;accéder aux commandes suivantes sans avoir besoin de retaper vos identifiants.&lt;/p&gt;

&lt;h2 id=&#34;utilisation-du-dépôt:5ccf6384c70e5ed97658dbf0e91e8805&#34;&gt;Utilisation du dépôt&lt;/h2&gt;

&lt;p&gt;Une fois la machine cliente configurée, vous pouvez simplement utiliser le dépot en préfixant les noms de vos images par l&amp;rsquo;URL du dépôt.
Par exemple, pour push/pull l&amp;rsquo;image de monapplication la commande suivante fera l&amp;rsquo;affaire :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker push mondepotdocker.tld/monapplication:v1.0.0
docker pull mondepotdocker.tld/monapplication:v1.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;utilisation-avec-docker-compose:5ccf6384c70e5ed97658dbf0e91e8805&#34;&gt;Utilisation avec docker-compose&lt;/h3&gt;

&lt;p&gt;Si vous utilisez docker-compose, il se peut que vous ayiez des soucis avec le certificat autosigné et/ou avec l&amp;rsquo;authentification.&lt;/p&gt;

&lt;p&gt;Pour contourner la vérification du certificat, vous pouvez simplement lancer &lt;code&gt;docker-compose&lt;/code&gt; avec le flag &lt;code&gt;--allow-insecure-ssl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Pour ce qui est de l&amp;rsquo;authentification, une astuce simple pour contourner les problèmes de ce genre est de faire un &lt;code&gt;docker pull&lt;/code&gt; manuellement au préalable (le scripter depuis le fichier compose.yml n&amp;rsquo;est pas trop difficile).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Améliorer la complétion JavaScript d&#39;IntelliJ IDEA</title>
      <link>https://blog-7460a.firebaseapp.com/2015/06/10/completionjavascriptdansintellij</link>
      <pubDate>Wed, 10 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog-7460a.firebaseapp.com/2015/06/10/completionjavascriptdansintellij</guid>
      <description>

&lt;h1 id=&#34;intellij-idea:704fd24739acbd1854643e7dcb3c357a&#34;&gt;IntelliJ IDEA&lt;/h1&gt;

&lt;p&gt;Tout le monde sait que nous adorons utiliser IntelliJ IDEA pour développer.
Peu importe le langage IntelliJ est vraiment un excellent IDE qui nous permet d&amp;rsquo;être efficaces quasiment instantanément.&lt;/p&gt;

&lt;p&gt;Par contre, quand on arrive dans le monde du JavaScript on peut avoir quelques soucis pour être
dans un environnement suffisamment typé où l&amp;rsquo;on sait ce qu&amp;rsquo;on va faire sans se poser trop de questions,
ou tout simplement pouvoir bénéficier de l&amp;rsquo;aide de l&amp;rsquo;IDE pour savoir de quelles méthodes on dispose.&lt;/p&gt;

&lt;h2 id=&#34;javascript-dans-intellij:704fd24739acbd1854643e7dcb3c357a&#34;&gt;JavaScript dans IntelliJ&lt;/h2&gt;

&lt;p&gt;Par défaut, IntelliJ est déjà suffisament malin pour scanner les fichiers du workspace
et trouver de la complétion en automatique (ainsi que la JSDoc).&lt;/p&gt;

&lt;p&gt;Cependant, ce mécanisme ne marche pas à tous les coups :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;vous utilisez des versions sur des CDN&lt;/li&gt;
&lt;li&gt;vous avez des versions minifiées dans votre workspace&lt;/li&gt;
&lt;li&gt;vous utilisez des outils qui impliquent certains framework (karma / jasmine / mocha&amp;hellip;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;faire-comprendre-le-javascript-à-intellij:704fd24739acbd1854643e7dcb3c357a&#34;&gt;Faire comprendre le JavaScript à IntelliJ&lt;/h2&gt;

&lt;p&gt;Pour réussir à obtenir une complétion correcte vous avez plusieurs solutions :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pour les CDN, vous pouvez demander à IntelliJ de récupérer la ressource (il ne la mettra pas dans votre projet pour autant)&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&#34;text-align:center;margin-bottom:50px&#34;&gt;
    &lt;a href=&#34;https://blog-7460a.firebaseapp.com/images/2015-06-JavaScriptIntelliJ/cdndl.png&#34; data-lightbox=&#34;group-1&#34; title=&#34;Le téléchargement des fichiers sur un CDN [alt+entrée]&#34; class=&#34;inlineBoxes&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/2015-06-JavaScriptIntelliJ/cdndl.png&#34; alt=&#34;Le téléchargement des fichiers sur un CDN [alt+entrée]&#34;/&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;pour les versions minifiées, vous pouvez ajouter manuellement les bibliothèques dans la fenêtre de paramètres (Languages &amp;amp; Frameworks &amp;gt; JavaScript &amp;gt; Libraries)&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&#34;text-align:center;margin-bottom:50px&#34;&gt;
    &lt;a href=&#34;https://blog-7460a.firebaseapp.com/images/2015-06-JavaScriptIntelliJ/settings.png&#34; data-lightbox=&#34;group-1&#34; title=&#34;La fenêtre des paramètres&#34; class=&#34;inlineBoxes&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/2015-06-JavaScriptIntelliJ/settings.png&#34; alt=&#34;La fenêtre des paramètres&#34;/&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;h2 id=&#34;la-mega-astuce:704fd24739acbd1854643e7dcb3c357a&#34;&gt;LA mega astuce&lt;/h2&gt;

&lt;p&gt;IntelliJ est capable de comprendre le TypeScript, et des gens ont eu la bonne idée de regrouper des définitions TypeScript pour
la plupart des librairies les plus utilisées dans un dépôt Github : &lt;a href=&#34;http://www.definitelytyped.org&#34;&gt;DefinitelyTyped&lt;/a&gt;.
Dans la fenêtre de création de librairie JavaScript, dans la partie qui permet le téléchargement d&amp;rsquo;une librairie,
sélectionnez la source &amp;ldquo;TypeScript Community Stubs&amp;rdquo;, vous verrez qu&amp;rsquo;il y a beaucoup de librairies que vous utilisez au quotidien.&lt;/p&gt;

&lt;p&gt;Avec ceci, vous aurez une complétion efficace, avec le typage offert par TypeScript (dans la mesure du possible),
ainsi qu&amp;rsquo;une documentation précise (pour la plupart des librairies).&lt;/p&gt;

&lt;div style=&#34;text-align:center;margin-bottom:50px&#34;&gt;
    &lt;a href=&#34;https://blog-7460a.firebaseapp.com/images/2015-06-JavaScriptIntelliJ/example.png&#34; data-lightbox=&#34;group-1&#34; title=&#34;Jasmine est bien connu par IntelliJ&#34; class=&#34;inlineBoxes&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/2015-06-JavaScriptIntelliJ/example.png&#34; alt=&#34;Jasmine est bien connu par IntelliJ&#34;/&gt;
    &lt;/a&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Android Support Design Library</title>
      <link>https://blog-7460a.firebaseapp.com/2015/06/06/androiddesignlibrary</link>
      <pubDate>Sat, 06 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog-7460a.firebaseapp.com/2015/06/06/androiddesignlibrary</guid>
      <description>&lt;p&gt;Avez-vous déjà essayé de transformer vos applications Android pour les rendre conformes aux &lt;a href=&#34;http://www.google.com/design/spec/material-design/introduction.html&#34;&gt;guidelines Material&lt;/a&gt;, si oui, vous avez dû comme nous, vous retrouver à importer plein de librairies tierces pour implémenter par exemple le &lt;code&gt;FAB button&lt;/code&gt;, ou même personnaliser le code pour rendre le &lt;code&gt;NavigationDrawer&lt;/code&gt; conforme (comme ce qui a pu être fait sur le squelette d&amp;rsquo;un &lt;a href=&#34;http://code-troopers.com/2014/11/26/SqueletteAndroid5.html&#34;&gt;précédent article&lt;/a&gt;. Et bien tout ceci est fini (enfin en partie), grâce à la nouvelle librairie Android de Google &lt;a href=&#34;http://developer.android.com/tools/support-library/features.html#design&#34;&gt;Design Support&lt;/a&gt;.&lt;/p&gt;

&lt;div style=&#34;text-align:center&#34;&gt;
&lt;video width=&#34;270&#34; height=&#34;444&#34; controls&gt;
  &lt;source src=&#34;https://blog-7460a.firebaseapp.com/videos/designlibrary-cheesesquare.mp4&#34; type=&#34;video/mp4&#34;&gt;
Your browser does not support the video tag.
&lt;/video&gt;
&lt;/div&gt;

&lt;p&gt;Pour le moment elle permet d&amp;rsquo;implémenter les composants Material suivants :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TextInputLayout&lt;/li&gt;
&lt;li&gt;FloatingActionButton&lt;/li&gt;
&lt;li&gt;Snackbar&lt;/li&gt;
&lt;li&gt;TabLayout&lt;/li&gt;
&lt;li&gt;NavigationView&lt;/li&gt;
&lt;li&gt;CoordinatorLayout&lt;/li&gt;
&lt;li&gt;AppBarLayout&lt;/li&gt;
&lt;li&gt;CollapsingToolbarLayout&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Je vous laisse consulter les différents articles trouvés sur le sujet pour avoir plus de détails :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://android-developers.blogspot.fr/2015/05/android-design-support-library.html&#34;&gt;L&amp;rsquo;article sur l&amp;rsquo;Android developers blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/android-bites/first-steps-with-the-design-support-library-8dcf06230ddd&#34;&gt;L&amp;rsquo;article sur medium.com&lt;/a&gt; : qui montre les nouveautés grâce à des petites vidéos mais montre aussi les problèmes (sûrement corrigés au moment où vous lirez cet article)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://antonioleiva.com/navigation-view/&#34;&gt;Un bout d&amp;rsquo;exemple avec du code pour le NavigationView&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enfin, voici le &lt;a href=&#34;https://github.com/chrisbanes/cheesesquare&#34;&gt;lien&lt;/a&gt; vers le code source de l&amp;rsquo;application exemple faite par &lt;a href=&#34;https://chris.banes.me/&#34;&gt;Chris Banes&lt;/a&gt;, montrant les principales nouveautés de cette librairie.&lt;/p&gt;

&lt;p&gt;À vos applications !&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>git : quelques astuces de configuration pour vos dotfiles</title>
      <link>https://blog-7460a.firebaseapp.com/2015/05/22/dotfiles-git</link>
      <pubDate>Fri, 22 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog-7460a.firebaseapp.com/2015/05/22/dotfiles-git</guid>
      <description>

&lt;p&gt;Cet article est le deuxième de la série des &lt;em&gt;dotfiles&lt;/em&gt;. Voir l&amp;rsquo;article sur &lt;a href=&#34;code-troopers.com/2015/05/15/Dotfiles-vim.html&#34;&gt;vimrc&lt;/a&gt;. Nous allons ici aborder quelques configurations indispensables de git.&lt;/p&gt;

&lt;h1 id=&#34;la-base:83bbafdbb7f3dd4e141ab0d9b554e336&#34;&gt;La base&lt;/h1&gt;

&lt;p&gt;Si vous utilisez git, vous avez forcément fait des commandes de base pour rentrer votre nom et votre email (indispensable pour pusher vos commits)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git config --global user.name &amp;quot;Jango Fett&amp;quot;
$ git config --global user.email &amp;quot;jango.fett@code-troopers.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ceci a pour but d&amp;rsquo;écrire dans votre fichier ~/.gitconfig ces simples lignes :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[user]
    name = Jango Fett
    email = jango.fett@code-troopers.com
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;un-peu-de-couleurs:83bbafdbb7f3dd4e141ab0d9b554e336&#34;&gt;Un peu de couleurs&lt;/h1&gt;

&lt;p&gt;C&amp;rsquo;est toujours important d&amp;rsquo;avoir de la couleur, ça donne bonne mine, ça rend joyeux mais surtout ça aide à la lisibilité. Dans les dernières version de git, la couleur est activée automatiquement, mais vous pouvez toujours la modifier ! Voici un exemple de configuration :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[color &amp;quot;branch&amp;quot;]
    current = yellow reverse
    local = yellow
    remote = green
[color &amp;quot;diff&amp;quot;]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
[color &amp;quot;status&amp;quot;]
    added = yellow
    changed = green
    untracked = cyan
&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&#34;text-align:center;margin-bottom:50px&#34;&gt;
    &lt;a href=&#34;https://blog-7460a.firebaseapp.com/images/postDotfilesGit/gitcolours.png&#34; data-lightbox=&#34;group-1&#34; title=&#34;git avec couleurs personnalisées&#34; class=&#34;inlineBoxes&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/postDotfilesGit/gitcolours.png&#34; alt=&#34;git avec couleurs personnalisées&#34;/&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;h1 id=&#34;gitignore-global:83bbafdbb7f3dd4e141ab0d9b554e336&#34;&gt;gitignore global&lt;/h1&gt;

&lt;p&gt;Parfois vous arrivez dans un environnement où personne n&amp;rsquo;utilise IntelliJ, peut-être même que vous voulez cacher le fait que vous utilisez IDEA. Dans ce cas, pas besoin de commiter un .gitignore qui contient &lt;code&gt;.idea&lt;/code&gt; et &lt;code&gt;*.iml&lt;/code&gt; mettez le plutôt dans &lt;code&gt;~/.gitignore&lt;/code&gt;. Pour que ça marche, vous devrez rajouter dans votre &lt;code&gt;~/.gitconfig&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[core]
    excludesfile = ~/.gitignore
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;j-3-vim:83bbafdbb7f3dd4e141ab0d9b554e336&#34;&gt;J&amp;rsquo;&amp;lt;3 vim&lt;/h1&gt;

&lt;p&gt;J&amp;rsquo;aime vim, alors je le met partout. Besoin d&amp;rsquo;un éditeur de texte pour les commits ? vim !&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[core]
    editor = vim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Besoin d&amp;rsquo;un outil pour faire des diff ? vim !&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[merge]
    tool = vimdiff
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;montre-nous-tes-fichiers:83bbafdbb7f3dd4e141ab0d9b554e336&#34;&gt;Montre-nous tes fichiers&lt;/h1&gt;

&lt;p&gt;Vous avez créé un nouveau répertoire, ajouté plein de fichiers dedans, et vous revenez en console pour voir ce qu&amp;rsquo;il y a à commiter. Soit un cas d&amp;rsquo;utilisation quotidien ou presque. Sauf que quand vous faîtes &lt;code&gt;git status&lt;/code&gt; seul le répertoire apparaît et pas les fichiers à l&amp;rsquo;intérieur ! Pour y remédier :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[status]
    showUntrackedFiles = all
&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&#34;text-align:center;margin-bottom:50px&#34;&gt;
    &lt;a href=&#34;https://blog-7460a.firebaseapp.com/images/postDotfilesGit/git-status.png&#34; data-lightbox=&#34;group-1&#34; title=&#34;git status coloré&#34; class=&#34;inlineBoxes&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/postDotfilesGit/git-status.png&#34; alt=&#34;git status coloré&#34;/&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;h1 id=&#34;alias:83bbafdbb7f3dd4e141ab0d9b554e336&#34;&gt;Alias&lt;/h1&gt;

&lt;p&gt;Comme pour les shell, on peut créer des alias de commande. Par exemple :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[alias]
    cp = cherry-pick
    co = checkout
    cl = clone
    ci = commit
    br = branch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;C&amp;rsquo;est plus rapide à taper… un peu, et encore faut s&amp;rsquo;en souvenir que cp ça fait cherry-pick. Mais certaines commandes sont longues et là ça devient encore plus pertinent :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    last = log -1 --stat
    st = status -sb
    unstage = reset HEAD --
    dc = diff --cached
    pr = pull --rebase
    lg = log --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %Cblue&amp;lt;%an&amp;gt;%Creset&#39; --abbrev-commit --date=relative --all
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Je vous laisse essayer celles qui ne sont pas explicite ;)&lt;/p&gt;

&lt;h1 id=&#34;les-hooks:83bbafdbb7f3dd4e141ab0d9b554e336&#34;&gt;Les Hooks&lt;/h1&gt;

&lt;p&gt;Il y a beaucoup d&amp;rsquo;options et de choses à faire mais je terminerai cet article avec les hooks, qui mériteraient peut-être à eux seuls un article. Un hook −qui se traduit par « crochet »− va intercepter une commande afin de réaliser une action. Par exemple, quand je lance la commande commit, je veux vérifier que tous les tests passent, ou quand je push, je veux mettre à jour automatiquement le ticket jira associé, on peut vraiment tout faire vu qu&amp;rsquo;il s&amp;rsquo;agit juste de scripts à rajouter.&lt;/p&gt;

&lt;p&gt;On a d&amp;rsquo;abord besoin de définir le répertoire qui va contenir les hooks. Vous pouvez ajouter dans votre &lt;code&gt;~/.gitconfig&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[init]
    templatedir = ~/.git_template
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Par exemple si vous voulez rajouter un script qui interdit de commiter &lt;code&gt;System.out.println&lt;/code&gt;, vous pouvez créer ce fichier : &lt;code&gt;~/.git_template/hooks/pre-commit&lt;/code&gt;
J&amp;rsquo;ai récupéré le mien sur &lt;a href=&#34;https://github.com/borisguery/git-keywords-checker&#34;&gt;https://github.com/borisguery/git-keywords-checker&lt;/a&gt; sur lequel j&amp;rsquo;ai juste modifié les deux variables KEYWORDS_REGEX et EXTENSIONS_REGEX. Ce qui donne grosso modo dans le fichier :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;5 # Add or remove keywords here
6 KEYWORDS_REGEX=&amp;quot;printStackTrace\(|FIXME|TODO&amp;quot;
7 # Add extensions to check here
8 EXTENSIONS_REGEX=&amp;quot;(.java$|.js$)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On interdit de commiter &lt;code&gt;printStackTrace(&lt;/code&gt; ou &lt;code&gt;FIXME&lt;/code&gt; ou &lt;code&gt;TODO&lt;/code&gt; dans les fichiers &lt;code&gt;java&lt;/code&gt; ou &lt;code&gt;js&lt;/code&gt;.&lt;/p&gt;

&lt;div style=&#34;text-align:center;margin-bottom:50px&#34;&gt;
    &lt;a href=&#34;https://blog-7460a.firebaseapp.com/images/postDotfilesGit/git-hooks.png&#34; data-lightbox=&#34;group-1&#34; title=&#34;git hooks pre-commit en action&#34; class=&#34;inlineBoxes&#34;&gt;
        &lt;img class=&#34;medium&#34; src=&#34;https://blog-7460a.firebaseapp.com/images/postDotfilesGit/git-hooks.png&#34; alt=&#34;git hooks pre-commit en action&#34;/&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Oui ça paraît un peu violent d&amp;rsquo;interdire le commit de TODO et FIXME mais on peut passer outre en commitant avec l&amp;rsquo;option &lt;code&gt;--no-verify&lt;/code&gt; et au moins on est au courant donc on n&amp;rsquo;oublie pas les actions nécessaires selon les équipes de travail (ajout d&amp;rsquo;un post-it, d&amp;rsquo;une carte trello etc.)&lt;/p&gt;

&lt;p&gt;2 petits détails pour que ça marche :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Il faut que le script soit exécutable, donc vous pouvez faire &lt;code&gt;chmod +x ~/.git_template/hooks/pre-commit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Ce sera actif uniquement sur les nouveaux dépôts, pour activer le hook sur les dépôts existants, vous devez faire un &lt;code&gt;git init&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Si vous voulez d&amp;rsquo;autres exemples de hooks, vous pouvez commencer par jeter un œil aux hooks de &lt;a href=&#34;https://github.com/petervanderdoes/git-flow-hooks&#34;&gt;git-flow&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>